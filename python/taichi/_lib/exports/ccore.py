# This file is auto-generated by misc/exports_to_py.py
# DO NOT edit this file manually!
# To regenerate this file, run:
#     python misc/exports_to_py.py

import os
import sys
import ctypes

from taichi._lib.utils import package_root

# EXPORTED_FUNCTIONS = (...)
EXPORTED_FUNCTIONS = (
    ("tie_String_create", [ctypes.c_char_p, ctypes.POINTER(ctypes.c_void_p)], ctypes.c_int),
    ("tie_String_destroy", [ctypes.c_void_p], ctypes.c_int),
    ("tie_String_c_str", [ctypes.c_void_p, ctypes.POINTER(ctypes.c_char_p)], ctypes.c_int),
    ("tie_String_size", [ctypes.c_void_p, ctypes.POINTER(ctypes.c_size_t)], ctypes.c_int),
    ("tie_G_set_last_error", [ctypes.c_int, ctypes.c_char_p], ctypes.c_int),
    ("tie_G_get_last_error", [ctypes.POINTER(ctypes.c_int), ctypes.POINTER(ctypes.c_char_p)], ctypes.c_int),
    ("tie_G_arch_name", [ctypes.c_int, ctypes.POINTER(ctypes.c_char_p)], ctypes.c_int),
    ("tie_G_arch_from_name", [ctypes.c_char_p, ctypes.POINTER(ctypes.c_int)], ctypes.c_int),
    ("tie_G_host_arch", [ctypes.POINTER(ctypes.c_int)], ctypes.c_int),
    ("tie_G_is_extension_supported", [ctypes.c_int, ctypes.c_int, ctypes.POINTER(ctypes.c_int)], ctypes.c_int),
    ("tie_G_default_compile_config", [ctypes.POINTER(ctypes.c_void_p)], ctypes.c_int),
    ("tie_G_reset_default_compile_config", [], ctypes.c_int),
    ("tie_CompileConfig_create", [ctypes.POINTER(ctypes.c_void_p)], ctypes.c_int),
    ("tie_CompileConfig_destroy", [ctypes.c_void_p], ctypes.c_int),
    ("tie_CompileConfig_get_arch", [ctypes.c_void_p, ctypes.POINTER(ctypes.c_int)], ctypes.c_int),
    ("tie_CompileConfig_set_arch", [ctypes.c_void_p, ctypes.c_int], ctypes.c_int),
    ("tie_CompileConfig_get_opt_level", [ctypes.c_void_p, ctypes.POINTER(ctypes.c_int)], ctypes.c_int),
    ("tie_CompileConfig_set_opt_level", [ctypes.c_void_p, ctypes.c_int], ctypes.c_int),
    ("tie_CompileConfig_get_print_ir", [ctypes.c_void_p, ctypes.POINTER(ctypes.c_int)], ctypes.c_int),
    ("tie_CompileConfig_set_print_ir", [ctypes.c_void_p, ctypes.c_int], ctypes.c_int),
    ("tie_CompileConfig_get_print_preprocessed_ir", [ctypes.c_void_p, ctypes.POINTER(ctypes.c_int)], ctypes.c_int),
    ("tie_CompileConfig_set_print_preprocessed_ir", [ctypes.c_void_p, ctypes.c_int], ctypes.c_int),
    ("tie_CompileConfig_get_debug", [ctypes.c_void_p, ctypes.POINTER(ctypes.c_int)], ctypes.c_int),
    ("tie_CompileConfig_set_debug", [ctypes.c_void_p, ctypes.c_int], ctypes.c_int),
    ("tie_CompileConfig_get_cfg_optimization", [ctypes.c_void_p, ctypes.POINTER(ctypes.c_int)], ctypes.c_int),
    ("tie_CompileConfig_set_cfg_optimization", [ctypes.c_void_p, ctypes.c_int], ctypes.c_int),
    ("tie_CompileConfig_get_check_out_of_bound", [ctypes.c_void_p, ctypes.POINTER(ctypes.c_int)], ctypes.c_int),
    ("tie_CompileConfig_set_check_out_of_bound", [ctypes.c_void_p, ctypes.c_int], ctypes.c_int),
    ("tie_CompileConfig_get_print_accessor_ir", [ctypes.c_void_p, ctypes.POINTER(ctypes.c_int)], ctypes.c_int),
    ("tie_CompileConfig_set_print_accessor_ir", [ctypes.c_void_p, ctypes.c_int], ctypes.c_int),
    ("tie_CompileConfig_get_use_llvm", [ctypes.c_void_p, ctypes.POINTER(ctypes.c_int)], ctypes.c_int),
    ("tie_CompileConfig_set_use_llvm", [ctypes.c_void_p, ctypes.c_int], ctypes.c_int),
    ("tie_CompileConfig_get_print_struct_llvm_ir", [ctypes.c_void_p, ctypes.POINTER(ctypes.c_int)], ctypes.c_int),
    ("tie_CompileConfig_set_print_struct_llvm_ir", [ctypes.c_void_p, ctypes.c_int], ctypes.c_int),
    ("tie_CompileConfig_get_print_kernel_llvm_ir", [ctypes.c_void_p, ctypes.POINTER(ctypes.c_int)], ctypes.c_int),
    ("tie_CompileConfig_set_print_kernel_llvm_ir", [ctypes.c_void_p, ctypes.c_int], ctypes.c_int),
    ("tie_CompileConfig_get_print_kernel_llvm_ir_optimized", [ctypes.c_void_p, ctypes.POINTER(ctypes.c_int)], ctypes.c_int),
    ("tie_CompileConfig_set_print_kernel_llvm_ir_optimized", [ctypes.c_void_p, ctypes.c_int], ctypes.c_int),
    ("tie_CompileConfig_get_print_kernel_asm", [ctypes.c_void_p, ctypes.POINTER(ctypes.c_int)], ctypes.c_int),
    ("tie_CompileConfig_set_print_kernel_asm", [ctypes.c_void_p, ctypes.c_int], ctypes.c_int),
    ("tie_CompileConfig_get_print_kernel_amdgcn", [ctypes.c_void_p, ctypes.POINTER(ctypes.c_int)], ctypes.c_int),
    ("tie_CompileConfig_set_print_kernel_amdgcn", [ctypes.c_void_p, ctypes.c_int], ctypes.c_int),
    ("tie_CompileConfig_get_simplify_before_lower_access", [ctypes.c_void_p, ctypes.POINTER(ctypes.c_int)], ctypes.c_int),
    ("tie_CompileConfig_set_simplify_before_lower_access", [ctypes.c_void_p, ctypes.c_int], ctypes.c_int),
    ("tie_CompileConfig_get_simplify_after_lower_access", [ctypes.c_void_p, ctypes.POINTER(ctypes.c_int)], ctypes.c_int),
    ("tie_CompileConfig_set_simplify_after_lower_access", [ctypes.c_void_p, ctypes.c_int], ctypes.c_int),
    ("tie_CompileConfig_get_lower_access", [ctypes.c_void_p, ctypes.POINTER(ctypes.c_int)], ctypes.c_int),
    ("tie_CompileConfig_set_lower_access", [ctypes.c_void_p, ctypes.c_int], ctypes.c_int),
    ("tie_CompileConfig_get_move_loop_invariant_outside_if", [ctypes.c_void_p, ctypes.POINTER(ctypes.c_int)], ctypes.c_int),
    ("tie_CompileConfig_set_move_loop_invariant_outside_if", [ctypes.c_void_p, ctypes.c_int], ctypes.c_int),
    ("tie_CompileConfig_get_cache_loop_invariant_global_vars", [ctypes.c_void_p, ctypes.POINTER(ctypes.c_int)], ctypes.c_int),
    ("tie_CompileConfig_set_cache_loop_invariant_global_vars", [ctypes.c_void_p, ctypes.c_int], ctypes.c_int),
    ("tie_CompileConfig_get_default_cpu_block_dim", [ctypes.c_void_p, ctypes.POINTER(ctypes.c_int)], ctypes.c_int),
    ("tie_CompileConfig_set_default_cpu_block_dim", [ctypes.c_void_p, ctypes.c_int], ctypes.c_int),
    ("tie_CompileConfig_get_cpu_block_dim_adaptive", [ctypes.c_void_p, ctypes.POINTER(ctypes.c_int)], ctypes.c_int),
    ("tie_CompileConfig_set_cpu_block_dim_adaptive", [ctypes.c_void_p, ctypes.c_int], ctypes.c_int),
    ("tie_CompileConfig_get_default_gpu_block_dim", [ctypes.c_void_p, ctypes.POINTER(ctypes.c_int)], ctypes.c_int),
    ("tie_CompileConfig_set_default_gpu_block_dim", [ctypes.c_void_p, ctypes.c_int], ctypes.c_int),
    ("tie_CompileConfig_get_gpu_max_reg", [ctypes.c_void_p, ctypes.POINTER(ctypes.c_int)], ctypes.c_int),
    ("tie_CompileConfig_set_gpu_max_reg", [ctypes.c_void_p, ctypes.c_int], ctypes.c_int),
    ("tie_CompileConfig_get_saturating_grid_dim", [ctypes.c_void_p, ctypes.POINTER(ctypes.c_int)], ctypes.c_int),
    ("tie_CompileConfig_set_saturating_grid_dim", [ctypes.c_void_p, ctypes.c_int], ctypes.c_int),
    ("tie_CompileConfig_get_max_block_dim", [ctypes.c_void_p, ctypes.POINTER(ctypes.c_int)], ctypes.c_int),
    ("tie_CompileConfig_set_max_block_dim", [ctypes.c_void_p, ctypes.c_int], ctypes.c_int),
    ("tie_CompileConfig_get_cpu_max_num_threads", [ctypes.c_void_p, ctypes.POINTER(ctypes.c_int)], ctypes.c_int),
    ("tie_CompileConfig_set_cpu_max_num_threads", [ctypes.c_void_p, ctypes.c_int], ctypes.c_int),
    ("tie_CompileConfig_get_random_seed", [ctypes.c_void_p, ctypes.POINTER(ctypes.c_int)], ctypes.c_int),
    ("tie_CompileConfig_set_random_seed", [ctypes.c_void_p, ctypes.c_int], ctypes.c_int),
    ("tie_CompileConfig_get_verbose_kernel_launches", [ctypes.c_void_p, ctypes.POINTER(ctypes.c_int)], ctypes.c_int),
    ("tie_CompileConfig_set_verbose_kernel_launches", [ctypes.c_void_p, ctypes.c_int], ctypes.c_int),
    ("tie_CompileConfig_get_verbose", [ctypes.c_void_p, ctypes.POINTER(ctypes.c_int)], ctypes.c_int),
    ("tie_CompileConfig_set_verbose", [ctypes.c_void_p, ctypes.c_int], ctypes.c_int),
    ("tie_CompileConfig_get_demote_dense_struct_fors", [ctypes.c_void_p, ctypes.POINTER(ctypes.c_int)], ctypes.c_int),
    ("tie_CompileConfig_set_demote_dense_struct_fors", [ctypes.c_void_p, ctypes.c_int], ctypes.c_int),
    ("tie_CompileConfig_get_kernel_profiler", [ctypes.c_void_p, ctypes.POINTER(ctypes.c_int)], ctypes.c_int),
    ("tie_CompileConfig_set_kernel_profiler", [ctypes.c_void_p, ctypes.c_int], ctypes.c_int),
    ("tie_CompileConfig_get_timeline", [ctypes.c_void_p, ctypes.POINTER(ctypes.c_int)], ctypes.c_int),
    ("tie_CompileConfig_set_timeline", [ctypes.c_void_p, ctypes.c_int], ctypes.c_int),
    ("tie_CompileConfig_get_default_fp", [ctypes.c_void_p, ctypes.POINTER(ctypes.c_void_p)], ctypes.c_int),
    ("tie_CompileConfig_set_default_fp", [ctypes.c_void_p, ctypes.c_void_p], ctypes.c_int),
    ("tie_CompileConfig_get_default_ip", [ctypes.c_void_p, ctypes.POINTER(ctypes.c_void_p)], ctypes.c_int),
    ("tie_CompileConfig_set_default_ip", [ctypes.c_void_p, ctypes.c_void_p], ctypes.c_int),
    ("tie_CompileConfig_get_default_up", [ctypes.c_void_p, ctypes.POINTER(ctypes.c_void_p)], ctypes.c_int),
    ("tie_CompileConfig_set_default_up", [ctypes.c_void_p, ctypes.c_void_p], ctypes.c_int),
    ("tie_CompileConfig_get_device_memory_GB", [ctypes.c_void_p, ctypes.POINTER(ctypes.c_double)], ctypes.c_int),
    ("tie_CompileConfig_set_device_memory_GB", [ctypes.c_void_p, ctypes.c_double], ctypes.c_int),
    ("tie_CompileConfig_get_device_memory_fraction", [ctypes.c_void_p, ctypes.POINTER(ctypes.c_double)], ctypes.c_int),
    ("tie_CompileConfig_set_device_memory_fraction", [ctypes.c_void_p, ctypes.c_double], ctypes.c_int),
    ("tie_CompileConfig_get_fast_math", [ctypes.c_void_p, ctypes.POINTER(ctypes.c_int)], ctypes.c_int),
    ("tie_CompileConfig_set_fast_math", [ctypes.c_void_p, ctypes.c_int], ctypes.c_int),
    ("tie_CompileConfig_get_advanced_optimization", [ctypes.c_void_p, ctypes.POINTER(ctypes.c_int)], ctypes.c_int),
    ("tie_CompileConfig_set_advanced_optimization", [ctypes.c_void_p, ctypes.c_int], ctypes.c_int),
    ("tie_CompileConfig_get_ad_stack_size", [ctypes.c_void_p, ctypes.POINTER(ctypes.c_int)], ctypes.c_int),
    ("tie_CompileConfig_set_ad_stack_size", [ctypes.c_void_p, ctypes.c_int], ctypes.c_int),
    ("tie_CompileConfig_get_flatten_if", [ctypes.c_void_p, ctypes.POINTER(ctypes.c_int)], ctypes.c_int),
    ("tie_CompileConfig_set_flatten_if", [ctypes.c_void_p, ctypes.c_int], ctypes.c_int),
    ("tie_CompileConfig_get_make_thread_local", [ctypes.c_void_p, ctypes.POINTER(ctypes.c_int)], ctypes.c_int),
    ("tie_CompileConfig_set_make_thread_local", [ctypes.c_void_p, ctypes.c_int], ctypes.c_int),
    ("tie_CompileConfig_get_make_block_local", [ctypes.c_void_p, ctypes.POINTER(ctypes.c_int)], ctypes.c_int),
    ("tie_CompileConfig_set_make_block_local", [ctypes.c_void_p, ctypes.c_int], ctypes.c_int),
    ("tie_CompileConfig_get_detect_read_only", [ctypes.c_void_p, ctypes.POINTER(ctypes.c_int)], ctypes.c_int),
    ("tie_CompileConfig_set_detect_read_only", [ctypes.c_void_p, ctypes.c_int], ctypes.c_int),
    ("tie_CompileConfig_get_real_matrix_scalarize", [ctypes.c_void_p, ctypes.POINTER(ctypes.c_int)], ctypes.c_int),
    ("tie_CompileConfig_set_real_matrix_scalarize", [ctypes.c_void_p, ctypes.c_int], ctypes.c_int),
    ("tie_CompileConfig_get_half2_vectorization", [ctypes.c_void_p, ctypes.POINTER(ctypes.c_int)], ctypes.c_int),
    ("tie_CompileConfig_set_half2_vectorization", [ctypes.c_void_p, ctypes.c_int], ctypes.c_int),
    ("tie_CompileConfig_get_make_cpu_multithreading_loop", [ctypes.c_void_p, ctypes.POINTER(ctypes.c_int)], ctypes.c_int),
    ("tie_CompileConfig_set_make_cpu_multithreading_loop", [ctypes.c_void_p, ctypes.c_int], ctypes.c_int),
    ("tie_CompileConfig_get_quant_opt_store_fusion", [ctypes.c_void_p, ctypes.POINTER(ctypes.c_int)], ctypes.c_int),
    ("tie_CompileConfig_set_quant_opt_store_fusion", [ctypes.c_void_p, ctypes.c_int], ctypes.c_int),
    ("tie_CompileConfig_get_quant_opt_atomic_demotion", [ctypes.c_void_p, ctypes.POINTER(ctypes.c_int)], ctypes.c_int),
    ("tie_CompileConfig_set_quant_opt_atomic_demotion", [ctypes.c_void_p, ctypes.c_int], ctypes.c_int),
    ("tie_CompileConfig_get_allow_nv_shader_extension", [ctypes.c_void_p, ctypes.POINTER(ctypes.c_int)], ctypes.c_int),
    ("tie_CompileConfig_set_allow_nv_shader_extension", [ctypes.c_void_p, ctypes.c_int], ctypes.c_int),
    ("tie_CompileConfig_get_make_mesh_block_local", [ctypes.c_void_p, ctypes.POINTER(ctypes.c_int)], ctypes.c_int),
    ("tie_CompileConfig_set_make_mesh_block_local", [ctypes.c_void_p, ctypes.c_int], ctypes.c_int),
    ("tie_CompileConfig_get_mesh_localize_to_end_mapping", [ctypes.c_void_p, ctypes.POINTER(ctypes.c_int)], ctypes.c_int),
    ("tie_CompileConfig_set_mesh_localize_to_end_mapping", [ctypes.c_void_p, ctypes.c_int], ctypes.c_int),
    ("tie_CompileConfig_get_mesh_localize_from_end_mapping", [ctypes.c_void_p, ctypes.POINTER(ctypes.c_int)], ctypes.c_int),
    ("tie_CompileConfig_set_mesh_localize_from_end_mapping", [ctypes.c_void_p, ctypes.c_int], ctypes.c_int),
    ("tie_CompileConfig_get_optimize_mesh_reordered_mapping", [ctypes.c_void_p, ctypes.POINTER(ctypes.c_int)], ctypes.c_int),
    ("tie_CompileConfig_set_optimize_mesh_reordered_mapping", [ctypes.c_void_p, ctypes.c_int], ctypes.c_int),
    ("tie_CompileConfig_get_mesh_localize_all_attr_mappings", [ctypes.c_void_p, ctypes.POINTER(ctypes.c_int)], ctypes.c_int),
    ("tie_CompileConfig_set_mesh_localize_all_attr_mappings", [ctypes.c_void_p, ctypes.c_int], ctypes.c_int),
    ("tie_CompileConfig_get_demote_no_access_mesh_fors", [ctypes.c_void_p, ctypes.POINTER(ctypes.c_int)], ctypes.c_int),
    ("tie_CompileConfig_set_demote_no_access_mesh_fors", [ctypes.c_void_p, ctypes.c_int], ctypes.c_int),
    ("tie_CompileConfig_get_experimental_auto_mesh_local", [ctypes.c_void_p, ctypes.POINTER(ctypes.c_int)], ctypes.c_int),
    ("tie_CompileConfig_set_experimental_auto_mesh_local", [ctypes.c_void_p, ctypes.c_int], ctypes.c_int),
    ("tie_CompileConfig_get_auto_mesh_local_default_occupacy", [ctypes.c_void_p, ctypes.POINTER(ctypes.c_int)], ctypes.c_int),
    ("tie_CompileConfig_set_auto_mesh_local_default_occupacy", [ctypes.c_void_p, ctypes.c_int], ctypes.c_int),
    ("tie_CompileConfig_get_offline_cache", [ctypes.c_void_p, ctypes.POINTER(ctypes.c_int)], ctypes.c_int),
    ("tie_CompileConfig_set_offline_cache", [ctypes.c_void_p, ctypes.c_int], ctypes.c_int),
    ("tie_CompileConfig_get_offline_cache_file_path", [ctypes.c_void_p, ctypes.POINTER(ctypes.c_char_p)], ctypes.c_int),
    ("tie_CompileConfig_set_offline_cache_file_path", [ctypes.c_void_p, ctypes.c_char_p], ctypes.c_int),
    ("tie_CompileConfig_get_offline_cache_cleaning_policy", [ctypes.c_void_p, ctypes.POINTER(ctypes.c_char_p)], ctypes.c_int),
    ("tie_CompileConfig_set_offline_cache_cleaning_policy", [ctypes.c_void_p, ctypes.c_char_p], ctypes.c_int),
    ("tie_CompileConfig_get_offline_cache_max_size_of_files", [ctypes.c_void_p, ctypes.POINTER(ctypes.c_int)], ctypes.c_int),
    ("tie_CompileConfig_set_offline_cache_max_size_of_files", [ctypes.c_void_p, ctypes.c_int], ctypes.c_int),
    ("tie_CompileConfig_get_offline_cache_cleaning_factor", [ctypes.c_void_p, ctypes.POINTER(ctypes.c_double)], ctypes.c_int),
    ("tie_CompileConfig_set_offline_cache_cleaning_factor", [ctypes.c_void_p, ctypes.c_double], ctypes.c_int),
    ("tie_CompileConfig_get_num_compile_threads", [ctypes.c_void_p, ctypes.POINTER(ctypes.c_int)], ctypes.c_int),
    ("tie_CompileConfig_set_num_compile_threads", [ctypes.c_void_p, ctypes.c_int], ctypes.c_int),
    ("tie_CompileConfig_get_vk_api_version", [ctypes.c_void_p, ctypes.POINTER(ctypes.c_char_p)], ctypes.c_int),
    ("tie_CompileConfig_set_vk_api_version", [ctypes.c_void_p, ctypes.c_char_p], ctypes.c_int),
    ("tie_CompileConfig_get_cuda_stack_limit", [ctypes.c_void_p, ctypes.POINTER(ctypes.c_size_t)], ctypes.c_int),
    ("tie_CompileConfig_set_cuda_stack_limit", [ctypes.c_void_p, ctypes.c_size_t], ctypes.c_int),
    ("tie_Kernel_insert_scalar_param", [ctypes.c_void_p, ctypes.c_void_p, ctypes.c_char_p, ctypes.POINTER(ctypes.c_int)], ctypes.c_int),
    ("tie_Kernel_insert_arr_param", [ctypes.c_void_p, ctypes.c_void_p, ctypes.c_int, ctypes.POINTER(ctypes.c_int), ctypes.c_size_t, ctypes.c_char_p, ctypes.POINTER(ctypes.c_int)], ctypes.c_int),
    ("tie_Kernel_insert_ndarray_param", [ctypes.c_void_p, ctypes.c_void_p, ctypes.c_int, ctypes.c_char_p, ctypes.c_int, ctypes.POINTER(ctypes.c_int)], ctypes.c_int),
    ("tie_Kernel_insert_texture_param", [ctypes.c_void_p, ctypes.c_int, ctypes.c_char_p, ctypes.POINTER(ctypes.c_int)], ctypes.c_int),
    ("tie_Kernel_insert_pointer_param", [ctypes.c_void_p, ctypes.c_void_p, ctypes.c_char_p, ctypes.POINTER(ctypes.c_int)], ctypes.c_int),
    ("tie_Kernel_insert_rw_texture_param", [ctypes.c_void_p, ctypes.c_int, ctypes.c_int, ctypes.c_char_p, ctypes.POINTER(ctypes.c_int)], ctypes.c_int),
    ("tie_Kernel_insert_ret", [ctypes.c_void_p, ctypes.c_void_p, ctypes.POINTER(ctypes.c_int)], ctypes.c_int),
    ("tie_Kernel_finalize_rets", [ctypes.c_void_p], ctypes.c_int),
    ("tie_Kernel_finalize_params", [ctypes.c_void_p], ctypes.c_int),
    ("tie_Kernel_ast_builder", [ctypes.c_void_p, ctypes.POINTER(ctypes.c_void_p)], ctypes.c_int),
    ("tie_Kernel_no_activate", [ctypes.c_void_p, ctypes.c_void_p], ctypes.c_int),
    ("tie_Function_insert_scalar_param", [ctypes.c_void_p, ctypes.c_void_p, ctypes.c_char_p, ctypes.POINTER(ctypes.c_int)], ctypes.c_int),
    ("tie_Function_insert_arr_param", [ctypes.c_void_p, ctypes.c_void_p, ctypes.c_int, ctypes.POINTER(ctypes.c_int), ctypes.c_size_t, ctypes.c_char_p, ctypes.POINTER(ctypes.c_int)], ctypes.c_int),
    ("tie_Function_insert_ndarray_param", [ctypes.c_void_p, ctypes.c_void_p, ctypes.c_int, ctypes.c_char_p, ctypes.c_int, ctypes.POINTER(ctypes.c_int)], ctypes.c_int),
    ("tie_Function_insert_texture_param", [ctypes.c_void_p, ctypes.c_int, ctypes.c_char_p, ctypes.POINTER(ctypes.c_int)], ctypes.c_int),
    ("tie_Function_insert_pointer_param", [ctypes.c_void_p, ctypes.c_void_p, ctypes.c_char_p, ctypes.POINTER(ctypes.c_int)], ctypes.c_int),
    ("tie_Function_insert_rw_texture_param", [ctypes.c_void_p, ctypes.c_int, ctypes.c_int, ctypes.c_char_p, ctypes.POINTER(ctypes.c_int)], ctypes.c_int),
    ("tie_Function_set_function_body", [ctypes.c_void_p, ctypes.CFUNCTYPE(ctypes.c_int)], ctypes.c_int),
    ("tie_Function_insert_ret", [ctypes.c_void_p, ctypes.c_void_p, ctypes.POINTER(ctypes.c_int)], ctypes.c_int),
    ("tie_Function_finalize_rets", [ctypes.c_void_p], ctypes.c_int),
    ("tie_Function_finalize_params", [ctypes.c_void_p], ctypes.c_int),
    ("tie_Function_ast_builder", [ctypes.c_void_p, ctypes.POINTER(ctypes.c_void_p)], ctypes.c_int),
    ("tie_LaunchContextBuilder_create", [ctypes.c_void_p, ctypes.POINTER(ctypes.c_void_p)], ctypes.c_int),
    ("tie_LaunchContextBuilder_destroy", [ctypes.c_void_p], ctypes.c_int),
    ("tie_LaunchContextBuilder_set_arg_int", [ctypes.c_void_p, ctypes.c_int, ctypes.c_int64], ctypes.c_int),
    ("tie_LaunchContextBuilder_set_arg_uint", [ctypes.c_void_p, ctypes.c_int, ctypes.c_uint64], ctypes.c_int),
    ("tie_LaunchContextBuilder_set_arg_float", [ctypes.c_void_p, ctypes.c_int, ctypes.c_double], ctypes.c_int),
    ("tie_LaunchContextBuilder_set_struct_arg_int", [ctypes.c_void_p, ctypes.POINTER(ctypes.c_int), ctypes.c_size_t, ctypes.c_int64], ctypes.c_int),
    ("tie_LaunchContextBuilder_set_struct_arg_uint", [ctypes.c_void_p, ctypes.POINTER(ctypes.c_int), ctypes.c_size_t, ctypes.c_uint64], ctypes.c_int),
    ("tie_LaunchContextBuilder_set_struct_arg_float", [ctypes.c_void_p, ctypes.POINTER(ctypes.c_int), ctypes.c_size_t, ctypes.c_double], ctypes.c_int),
    ("tie_LaunchContextBuilder_set_arg_external_array_with_shape", [ctypes.c_void_p, ctypes.c_int, ctypes.c_uint64, ctypes.c_uint64, ctypes.POINTER(ctypes.c_int64), ctypes.c_size_t, ctypes.c_uint64], ctypes.c_int),
    ("tie_LaunchContextBuilder_set_arg_ndarray", [ctypes.c_void_p, ctypes.c_int, ctypes.c_void_p], ctypes.c_int),
    ("tie_LaunchContextBuilder_set_arg_ndarray_with_grad", [ctypes.c_void_p, ctypes.c_int, ctypes.c_void_p, ctypes.c_void_p], ctypes.c_int),
    ("tie_LaunchContextBuilder_set_arg_texture", [ctypes.c_void_p, ctypes.c_int, ctypes.c_void_p], ctypes.c_int),
    ("tie_LaunchContextBuilder_set_arg_rw_texture", [ctypes.c_void_p, ctypes.c_int, ctypes.c_void_p], ctypes.c_int),
    ("tie_LaunchContextBuilder_get_struct_ret_int", [ctypes.c_void_p, ctypes.POINTER(ctypes.c_int), ctypes.c_size_t, ctypes.POINTER(ctypes.c_int64)], ctypes.c_int),
    ("tie_LaunchContextBuilder_get_struct_ret_uint", [ctypes.c_void_p, ctypes.POINTER(ctypes.c_int), ctypes.c_size_t, ctypes.POINTER(ctypes.c_uint64)], ctypes.c_int),
    ("tie_LaunchContextBuilder_get_struct_ret_float", [ctypes.c_void_p, ctypes.POINTER(ctypes.c_int), ctypes.c_size_t, ctypes.POINTER(ctypes.c_double)], ctypes.c_int),
    ("tie_Program_create", [ctypes.POINTER(ctypes.c_void_p)], ctypes.c_int),
    ("tie_Program_destroy", [ctypes.c_void_p], ctypes.c_int),
    ("tie_Program_finalize", [ctypes.c_void_p], ctypes.c_int),
    ("tie_Program_synchronize", [ctypes.c_void_p], ctypes.c_int),
    ("tie_Program_config", [ctypes.c_void_p, ctypes.POINTER(ctypes.c_void_p)], ctypes.c_int),
    ("tie_Program_sync_kernel_profiler", [ctypes.c_void_p], ctypes.c_int),
    ("tie_Program_update_kernel_profiler", [ctypes.c_void_p], ctypes.c_int),
    ("tie_Program_clear_kernel_profiler", [ctypes.c_void_p], ctypes.c_int),
    ("tie_Program_query_kernel_profile_info", [ctypes.c_void_p, ctypes.c_char_p, ctypes.POINTER(ctypes.c_int), ctypes.POINTER(ctypes.c_double), ctypes.POINTER(ctypes.c_double), ctypes.POINTER(ctypes.c_double)], ctypes.c_int),
    ("tie_Program_get_num_kernel_profiler_records", [ctypes.c_void_p, ctypes.POINTER(ctypes.c_size_t)], ctypes.c_int),
    ("tie_Program_get_kernel_profiler_record", [ctypes.c_void_p, ctypes.c_size_t, ctypes.POINTER(ctypes.c_void_p)], ctypes.c_int),
    ("tie_Program_get_kernel_profiler_device_name", [ctypes.c_void_p, ctypes.POINTER(ctypes.c_void_p)], ctypes.c_int),
    ("tie_Program_reinit_kernel_profiler_with_metrics", [ctypes.c_void_p, ctypes.POINTER(ctypes.c_char_p), ctypes.c_size_t, ctypes.POINTER(ctypes.c_int)], ctypes.c_int),
    ("tie_Program_kernel_profiler_total_time", [ctypes.c_void_p, ctypes.POINTER(ctypes.c_double)], ctypes.c_int),
    ("tie_Program_set_kernel_profiler_toolkit", [ctypes.c_void_p, ctypes.c_char_p, ctypes.POINTER(ctypes.c_int)], ctypes.c_int),
    ("tie_Program_timeline_clear", [ctypes.c_void_p], ctypes.c_int),
    ("tie_Program_timeline_save", [ctypes.c_void_p, ctypes.c_char_p], ctypes.c_int),
    ("tie_Program_print_memory_profiler_info", [ctypes.c_void_p], ctypes.c_int),
    ("tie_Program_get_total_compilation_time", [ctypes.c_void_p, ctypes.POINTER(ctypes.c_double)], ctypes.c_int),
    ("tie_Program_get_snode_num_dynamically_allocated", [ctypes.c_void_p, ctypes.c_void_p, ctypes.POINTER(ctypes.c_size_t)], ctypes.c_int),
    ("tie_Program_materialize_runtime", [ctypes.c_void_p], ctypes.c_int),
    ("tie_Program_make_aot_module_builder", [ctypes.c_void_p, ctypes.c_int, ctypes.POINTER(ctypes.c_char_p), ctypes.c_size_t, ctypes.POINTER(ctypes.c_void_p)], ctypes.c_int),
    ("tie_Program_get_snode_tree_size", [ctypes.c_void_p, ctypes.POINTER(ctypes.c_int)], ctypes.c_int),
    ("tie_Program_get_snode_root", [ctypes.c_void_p, ctypes.c_int, ctypes.POINTER(ctypes.c_void_p)], ctypes.c_int),
    ("tie_Program_create_kernel", [ctypes.c_void_p, ctypes.c_char_p, ctypes.c_int, ctypes.POINTER(ctypes.c_void_p)], ctypes.c_int),
    ("tie_Program_create_function", [ctypes.c_void_p, ctypes.c_char_p, ctypes.c_int, ctypes.c_int, ctypes.POINTER(ctypes.c_void_p)], ctypes.c_int),
    ("tie_Program_create_sparse_matrix", [ctypes.c_void_p, ctypes.c_int, ctypes.c_int, ctypes.c_void_p, ctypes.c_char_p, ctypes.POINTER(ctypes.c_void_p)], ctypes.c_int),
    ("tie_Program_make_sparse_matrix_from_ndarray", [ctypes.c_void_p, ctypes.c_void_p, ctypes.c_void_p], ctypes.c_int),
    ("tie_Program_create_ndarray", [ctypes.c_void_p, ctypes.c_void_p, ctypes.POINTER(ctypes.c_int), ctypes.c_size_t, ctypes.c_int, ctypes.c_int, ctypes.POINTER(ctypes.c_void_p)], ctypes.c_int),
    ("tie_Program_delete_ndarray", [ctypes.c_void_p, ctypes.c_void_p], ctypes.c_int),
    ("tie_Program_create_texture", [ctypes.c_void_p, ctypes.c_int, ctypes.POINTER(ctypes.c_int), ctypes.c_size_t, ctypes.POINTER(ctypes.c_void_p)], ctypes.c_int),
    ("tie_Program_fill_ndarray_float", [ctypes.c_void_p, ctypes.c_void_p, ctypes.c_float], ctypes.c_int),
    ("tie_Program_fill_ndarray_int", [ctypes.c_void_p, ctypes.c_void_p, ctypes.c_int32], ctypes.c_int),
    ("tie_Program_fill_ndarray_uint", [ctypes.c_void_p, ctypes.c_void_p, ctypes.c_uint32], ctypes.c_int),
    ("tie_Program_compile_kernel", [ctypes.c_void_p, ctypes.c_void_p, ctypes.c_void_p, ctypes.POINTER(ctypes.c_void_p)], ctypes.c_int),
    ("tie_Program_launch_kernel", [ctypes.c_void_p, ctypes.c_void_p, ctypes.c_void_p], ctypes.c_int),
    ("tie_KernelProfileTracedRecord_get_register_per_thread", [ctypes.c_void_p, ctypes.POINTER(ctypes.c_int)], ctypes.c_int),
    ("tie_KernelProfileTracedRecord_get_shared_mem_per_block", [ctypes.c_void_p, ctypes.POINTER(ctypes.c_int)], ctypes.c_int),
    ("tie_KernelProfileTracedRecord_get_grid_size", [ctypes.c_void_p, ctypes.POINTER(ctypes.c_int)], ctypes.c_int),
    ("tie_KernelProfileTracedRecord_get_block_size", [ctypes.c_void_p, ctypes.POINTER(ctypes.c_int)], ctypes.c_int),
    ("tie_KernelProfileTracedRecord_get_active_blocks_per_multiprocessor", [ctypes.c_void_p, ctypes.POINTER(ctypes.c_int)], ctypes.c_int),
    ("tie_KernelProfileTracedRecord_get_kernel_elapsed_time_in_ms", [ctypes.c_void_p, ctypes.POINTER(ctypes.c_float)], ctypes.c_int),
    ("tie_KernelProfileTracedRecord_get_time_since_base", [ctypes.c_void_p, ctypes.POINTER(ctypes.c_float)], ctypes.c_int),
    ("tie_KernelProfileTracedRecord_get_name", [ctypes.c_void_p, ctypes.POINTER(ctypes.c_char_p)], ctypes.c_int),
    ("tie_KernelProfileTracedRecord_get_num_metric_values", [ctypes.c_void_p, ctypes.POINTER(ctypes.c_size_t)], ctypes.c_int),
    ("tie_KernelProfileTracedRecord_get_metric_value", [ctypes.c_void_p, ctypes.c_size_t, ctypes.POINTER(ctypes.c_float)], ctypes.c_int),
    ("tie_G_set_pytype_tp_finalize", [ctypes.c_void_p], ctypes.c_int)
)


def _load_dll(path):
    try:
        if (
            sys.version_info[0] > 3
            or sys.version_info[0] == 3
            and sys.version_info[1] >= 8
        ):
            dll = ctypes.CDLL(path, winmode=0)
        else:
            dll = ctypes.CDLL(path)
    except OSError:
        return None
    return dll


def load_core_exports_dll():
    from glob import glob

    bin_path = os.path.join(package_root, "_lib", "core")
    if os.name == "nt":
        if (
            sys.version_info[0] > 3
            or sys.version_info[0] == 3
            and sys.version_info[1] >= 8
        ):
            os.add_dll_directory(bin_path)
        else:
            os.environ["PATH"] = bin_path + os.pathsep + os.environ["PATH"]

    dll_path = glob(os.path.join(bin_path, "taichi_python*"))
    if len(dll_path) != 1:
        return None

    return _load_dll(dll_path[0])


def load_and_init_core_exports():
    _dll = load_core_exports_dll()
    if _dll is None:
        raise RuntimeError("Cannot load taichi_core_exports.dll")

    global EXPORTED_FUNCTIONS
    for func in EXPORTED_FUNCTIONS:
        func_name, func_argtypes, func_restype = func
        c_func = getattr(_dll, func_name)
        c_func.argtypes = func_argtypes
        c_func.restype = func_restype
    del EXPORTED_FUNCTIONS
    return _dll


taichi_ccore = load_and_init_core_exports()

__all__ = ['taichi_ccore']

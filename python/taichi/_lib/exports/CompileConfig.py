# This file is auto-generated by misc/exports_to_py.py
# DO NOT edit this file manually!
# To regenerate this file, run:
#     python misc/exports_to_py.py

import ctypes
from .ccore import taichi_ccore
from .utils import get_exception_to_throw_if_not_success, get_python_object_from_handle, wrap_callback_to_c


from .global_functions import get_last_error

from .global_functions import set_pytype_tp_finalize


# Class CompileConfig
class CompileConfig:
    def __init__(self, *args, handle=None, manage_handle=False):
        if handle is not None:
            self._manage_handle = manage_handle
            self._handle = handle
        else:
            self._manage_handle = True
            self._handle = self.create(*args)

    def get_handle(self):
        return self._handle

    @staticmethod
    def create():
        ret_handle = ctypes.c_void_p()
        ret = taichi_ccore.tie_CompileConfig_create(ctypes.byref(ret_handle))
        ex = get_exception_to_throw_if_not_success(ret, get_last_error)
        if ex is not None:
            raise ex
        return (
            ret_handle.value    
        )

    def destroy(self):
        ret = taichi_ccore.tie_CompileConfig_destroy(self.get_handle())
        ex = get_exception_to_throw_if_not_success(ret, get_last_error)
        if ex is not None:
            raise ex

    def get_arch(self):
        ret_arch = ctypes.c_int()
        ret = taichi_ccore.tie_CompileConfig_get_arch(self.get_handle(), ctypes.byref(ret_arch))
        ex = get_exception_to_throw_if_not_success(ret, get_last_error)
        if ex is not None:
            raise ex
        return (
            ret_arch.value    
        )

    def set_arch(self, arch):
        ret = taichi_ccore.tie_CompileConfig_set_arch(self.get_handle(), int(arch))
        ex = get_exception_to_throw_if_not_success(ret, get_last_error)
        if ex is not None:
            raise ex

    def get_opt_level(self):
        ret_opt_level = ctypes.c_int()
        ret = taichi_ccore.tie_CompileConfig_get_opt_level(self.get_handle(), ctypes.byref(ret_opt_level))
        ex = get_exception_to_throw_if_not_success(ret, get_last_error)
        if ex is not None:
            raise ex
        return (
            ret_opt_level.value    
        )

    def set_opt_level(self, opt_level):
        ret = taichi_ccore.tie_CompileConfig_set_opt_level(self.get_handle(), int(opt_level))
        ex = get_exception_to_throw_if_not_success(ret, get_last_error)
        if ex is not None:
            raise ex

    def get_print_ir(self):
        ret_print_ir = ctypes.c_int()
        ret = taichi_ccore.tie_CompileConfig_get_print_ir(self.get_handle(), ctypes.byref(ret_print_ir))
        ex = get_exception_to_throw_if_not_success(ret, get_last_error)
        if ex is not None:
            raise ex
        return (
            bool(ret_print_ir.value)    
        )

    def set_print_ir(self, print_ir):
        ret = taichi_ccore.tie_CompileConfig_set_print_ir(self.get_handle(), bool(print_ir))
        ex = get_exception_to_throw_if_not_success(ret, get_last_error)
        if ex is not None:
            raise ex

    def get_print_preprocessed_ir(self):
        ret_print_preprocessed_ir = ctypes.c_int()
        ret = taichi_ccore.tie_CompileConfig_get_print_preprocessed_ir(self.get_handle(), ctypes.byref(ret_print_preprocessed_ir))
        ex = get_exception_to_throw_if_not_success(ret, get_last_error)
        if ex is not None:
            raise ex
        return (
            bool(ret_print_preprocessed_ir.value)    
        )

    def set_print_preprocessed_ir(self, print_preprocessed_ir):
        ret = taichi_ccore.tie_CompileConfig_set_print_preprocessed_ir(self.get_handle(), bool(print_preprocessed_ir))
        ex = get_exception_to_throw_if_not_success(ret, get_last_error)
        if ex is not None:
            raise ex

    def get_debug(self):
        ret_debug = ctypes.c_int()
        ret = taichi_ccore.tie_CompileConfig_get_debug(self.get_handle(), ctypes.byref(ret_debug))
        ex = get_exception_to_throw_if_not_success(ret, get_last_error)
        if ex is not None:
            raise ex
        return (
            bool(ret_debug.value)    
        )

    def set_debug(self, debug):
        ret = taichi_ccore.tie_CompileConfig_set_debug(self.get_handle(), bool(debug))
        ex = get_exception_to_throw_if_not_success(ret, get_last_error)
        if ex is not None:
            raise ex

    def get_cfg_optimization(self):
        ret_cfg_optimization = ctypes.c_int()
        ret = taichi_ccore.tie_CompileConfig_get_cfg_optimization(self.get_handle(), ctypes.byref(ret_cfg_optimization))
        ex = get_exception_to_throw_if_not_success(ret, get_last_error)
        if ex is not None:
            raise ex
        return (
            bool(ret_cfg_optimization.value)    
        )

    def set_cfg_optimization(self, cfg_optimization):
        ret = taichi_ccore.tie_CompileConfig_set_cfg_optimization(self.get_handle(), bool(cfg_optimization))
        ex = get_exception_to_throw_if_not_success(ret, get_last_error)
        if ex is not None:
            raise ex

    def get_check_out_of_bound(self):
        ret_check_out_of_bound = ctypes.c_int()
        ret = taichi_ccore.tie_CompileConfig_get_check_out_of_bound(self.get_handle(), ctypes.byref(ret_check_out_of_bound))
        ex = get_exception_to_throw_if_not_success(ret, get_last_error)
        if ex is not None:
            raise ex
        return (
            bool(ret_check_out_of_bound.value)    
        )

    def set_check_out_of_bound(self, check_out_of_bound):
        ret = taichi_ccore.tie_CompileConfig_set_check_out_of_bound(self.get_handle(), bool(check_out_of_bound))
        ex = get_exception_to_throw_if_not_success(ret, get_last_error)
        if ex is not None:
            raise ex

    def get_print_accessor_ir(self):
        ret_print_accessor_ir = ctypes.c_int()
        ret = taichi_ccore.tie_CompileConfig_get_print_accessor_ir(self.get_handle(), ctypes.byref(ret_print_accessor_ir))
        ex = get_exception_to_throw_if_not_success(ret, get_last_error)
        if ex is not None:
            raise ex
        return (
            bool(ret_print_accessor_ir.value)    
        )

    def set_print_accessor_ir(self, print_accessor_ir):
        ret = taichi_ccore.tie_CompileConfig_set_print_accessor_ir(self.get_handle(), bool(print_accessor_ir))
        ex = get_exception_to_throw_if_not_success(ret, get_last_error)
        if ex is not None:
            raise ex

    def get_use_llvm(self):
        ret_use_llvm = ctypes.c_int()
        ret = taichi_ccore.tie_CompileConfig_get_use_llvm(self.get_handle(), ctypes.byref(ret_use_llvm))
        ex = get_exception_to_throw_if_not_success(ret, get_last_error)
        if ex is not None:
            raise ex
        return (
            bool(ret_use_llvm.value)    
        )

    def set_use_llvm(self, use_llvm):
        ret = taichi_ccore.tie_CompileConfig_set_use_llvm(self.get_handle(), bool(use_llvm))
        ex = get_exception_to_throw_if_not_success(ret, get_last_error)
        if ex is not None:
            raise ex

    def get_print_struct_llvm_ir(self):
        ret_print_struct_llvm_ir = ctypes.c_int()
        ret = taichi_ccore.tie_CompileConfig_get_print_struct_llvm_ir(self.get_handle(), ctypes.byref(ret_print_struct_llvm_ir))
        ex = get_exception_to_throw_if_not_success(ret, get_last_error)
        if ex is not None:
            raise ex
        return (
            bool(ret_print_struct_llvm_ir.value)    
        )

    def set_print_struct_llvm_ir(self, print_struct_llvm_ir):
        ret = taichi_ccore.tie_CompileConfig_set_print_struct_llvm_ir(self.get_handle(), bool(print_struct_llvm_ir))
        ex = get_exception_to_throw_if_not_success(ret, get_last_error)
        if ex is not None:
            raise ex

    def get_print_kernel_llvm_ir(self):
        ret_print_kernel_llvm_ir = ctypes.c_int()
        ret = taichi_ccore.tie_CompileConfig_get_print_kernel_llvm_ir(self.get_handle(), ctypes.byref(ret_print_kernel_llvm_ir))
        ex = get_exception_to_throw_if_not_success(ret, get_last_error)
        if ex is not None:
            raise ex
        return (
            bool(ret_print_kernel_llvm_ir.value)    
        )

    def set_print_kernel_llvm_ir(self, print_kernel_llvm_ir):
        ret = taichi_ccore.tie_CompileConfig_set_print_kernel_llvm_ir(self.get_handle(), bool(print_kernel_llvm_ir))
        ex = get_exception_to_throw_if_not_success(ret, get_last_error)
        if ex is not None:
            raise ex

    def get_print_kernel_llvm_ir_optimized(self):
        ret_print_kernel_llvm_ir_optimized = ctypes.c_int()
        ret = taichi_ccore.tie_CompileConfig_get_print_kernel_llvm_ir_optimized(self.get_handle(), ctypes.byref(ret_print_kernel_llvm_ir_optimized))
        ex = get_exception_to_throw_if_not_success(ret, get_last_error)
        if ex is not None:
            raise ex
        return (
            bool(ret_print_kernel_llvm_ir_optimized.value)    
        )

    def set_print_kernel_llvm_ir_optimized(self, print_kernel_llvm_ir_optimized):
        ret = taichi_ccore.tie_CompileConfig_set_print_kernel_llvm_ir_optimized(self.get_handle(), bool(print_kernel_llvm_ir_optimized))
        ex = get_exception_to_throw_if_not_success(ret, get_last_error)
        if ex is not None:
            raise ex

    def get_print_kernel_asm(self):
        ret_print_kernel_asm = ctypes.c_int()
        ret = taichi_ccore.tie_CompileConfig_get_print_kernel_asm(self.get_handle(), ctypes.byref(ret_print_kernel_asm))
        ex = get_exception_to_throw_if_not_success(ret, get_last_error)
        if ex is not None:
            raise ex
        return (
            bool(ret_print_kernel_asm.value)    
        )

    def set_print_kernel_asm(self, print_kernel_asm):
        ret = taichi_ccore.tie_CompileConfig_set_print_kernel_asm(self.get_handle(), bool(print_kernel_asm))
        ex = get_exception_to_throw_if_not_success(ret, get_last_error)
        if ex is not None:
            raise ex

    def get_print_kernel_amdgcn(self):
        ret_print_kernel_amdgcn = ctypes.c_int()
        ret = taichi_ccore.tie_CompileConfig_get_print_kernel_amdgcn(self.get_handle(), ctypes.byref(ret_print_kernel_amdgcn))
        ex = get_exception_to_throw_if_not_success(ret, get_last_error)
        if ex is not None:
            raise ex
        return (
            bool(ret_print_kernel_amdgcn.value)    
        )

    def set_print_kernel_amdgcn(self, print_kernel_amdgcn):
        ret = taichi_ccore.tie_CompileConfig_set_print_kernel_amdgcn(self.get_handle(), bool(print_kernel_amdgcn))
        ex = get_exception_to_throw_if_not_success(ret, get_last_error)
        if ex is not None:
            raise ex

    def get_simplify_before_lower_access(self):
        ret_simplify_before_lower_access = ctypes.c_int()
        ret = taichi_ccore.tie_CompileConfig_get_simplify_before_lower_access(self.get_handle(), ctypes.byref(ret_simplify_before_lower_access))
        ex = get_exception_to_throw_if_not_success(ret, get_last_error)
        if ex is not None:
            raise ex
        return (
            bool(ret_simplify_before_lower_access.value)    
        )

    def set_simplify_before_lower_access(self, simplify_before_lower_access):
        ret = taichi_ccore.tie_CompileConfig_set_simplify_before_lower_access(self.get_handle(), bool(simplify_before_lower_access))
        ex = get_exception_to_throw_if_not_success(ret, get_last_error)
        if ex is not None:
            raise ex

    def get_simplify_after_lower_access(self):
        ret_simplify_after_lower_access = ctypes.c_int()
        ret = taichi_ccore.tie_CompileConfig_get_simplify_after_lower_access(self.get_handle(), ctypes.byref(ret_simplify_after_lower_access))
        ex = get_exception_to_throw_if_not_success(ret, get_last_error)
        if ex is not None:
            raise ex
        return (
            bool(ret_simplify_after_lower_access.value)    
        )

    def set_simplify_after_lower_access(self, simplify_after_lower_access):
        ret = taichi_ccore.tie_CompileConfig_set_simplify_after_lower_access(self.get_handle(), bool(simplify_after_lower_access))
        ex = get_exception_to_throw_if_not_success(ret, get_last_error)
        if ex is not None:
            raise ex

    def get_lower_access(self):
        ret_lower_access = ctypes.c_int()
        ret = taichi_ccore.tie_CompileConfig_get_lower_access(self.get_handle(), ctypes.byref(ret_lower_access))
        ex = get_exception_to_throw_if_not_success(ret, get_last_error)
        if ex is not None:
            raise ex
        return (
            bool(ret_lower_access.value)    
        )

    def set_lower_access(self, lower_access):
        ret = taichi_ccore.tie_CompileConfig_set_lower_access(self.get_handle(), bool(lower_access))
        ex = get_exception_to_throw_if_not_success(ret, get_last_error)
        if ex is not None:
            raise ex

    def get_move_loop_invariant_outside_if(self):
        ret_move_loop_invariant_outside_if = ctypes.c_int()
        ret = taichi_ccore.tie_CompileConfig_get_move_loop_invariant_outside_if(self.get_handle(), ctypes.byref(ret_move_loop_invariant_outside_if))
        ex = get_exception_to_throw_if_not_success(ret, get_last_error)
        if ex is not None:
            raise ex
        return (
            bool(ret_move_loop_invariant_outside_if.value)    
        )

    def set_move_loop_invariant_outside_if(self, move_loop_invariant_outside_if):
        ret = taichi_ccore.tie_CompileConfig_set_move_loop_invariant_outside_if(self.get_handle(), bool(move_loop_invariant_outside_if))
        ex = get_exception_to_throw_if_not_success(ret, get_last_error)
        if ex is not None:
            raise ex

    def get_cache_loop_invariant_global_vars(self):
        ret_cache_loop_invariant_global_vars = ctypes.c_int()
        ret = taichi_ccore.tie_CompileConfig_get_cache_loop_invariant_global_vars(self.get_handle(), ctypes.byref(ret_cache_loop_invariant_global_vars))
        ex = get_exception_to_throw_if_not_success(ret, get_last_error)
        if ex is not None:
            raise ex
        return (
            bool(ret_cache_loop_invariant_global_vars.value)    
        )

    def set_cache_loop_invariant_global_vars(self, cache_loop_invariant_global_vars):
        ret = taichi_ccore.tie_CompileConfig_set_cache_loop_invariant_global_vars(self.get_handle(), bool(cache_loop_invariant_global_vars))
        ex = get_exception_to_throw_if_not_success(ret, get_last_error)
        if ex is not None:
            raise ex

    def get_default_cpu_block_dim(self):
        ret_default_cpu_block_dim = ctypes.c_int()
        ret = taichi_ccore.tie_CompileConfig_get_default_cpu_block_dim(self.get_handle(), ctypes.byref(ret_default_cpu_block_dim))
        ex = get_exception_to_throw_if_not_success(ret, get_last_error)
        if ex is not None:
            raise ex
        return (
            ret_default_cpu_block_dim.value    
        )

    def set_default_cpu_block_dim(self, default_cpu_block_dim):
        ret = taichi_ccore.tie_CompileConfig_set_default_cpu_block_dim(self.get_handle(), int(default_cpu_block_dim))
        ex = get_exception_to_throw_if_not_success(ret, get_last_error)
        if ex is not None:
            raise ex

    def get_cpu_block_dim_adaptive(self):
        ret_cpu_block_dim_adaptive = ctypes.c_int()
        ret = taichi_ccore.tie_CompileConfig_get_cpu_block_dim_adaptive(self.get_handle(), ctypes.byref(ret_cpu_block_dim_adaptive))
        ex = get_exception_to_throw_if_not_success(ret, get_last_error)
        if ex is not None:
            raise ex
        return (
            bool(ret_cpu_block_dim_adaptive.value)    
        )

    def set_cpu_block_dim_adaptive(self, cpu_block_dim_adaptive):
        ret = taichi_ccore.tie_CompileConfig_set_cpu_block_dim_adaptive(self.get_handle(), bool(cpu_block_dim_adaptive))
        ex = get_exception_to_throw_if_not_success(ret, get_last_error)
        if ex is not None:
            raise ex

    def get_default_gpu_block_dim(self):
        ret_default_gpu_block_dim = ctypes.c_int()
        ret = taichi_ccore.tie_CompileConfig_get_default_gpu_block_dim(self.get_handle(), ctypes.byref(ret_default_gpu_block_dim))
        ex = get_exception_to_throw_if_not_success(ret, get_last_error)
        if ex is not None:
            raise ex
        return (
            ret_default_gpu_block_dim.value    
        )

    def set_default_gpu_block_dim(self, default_gpu_block_dim):
        ret = taichi_ccore.tie_CompileConfig_set_default_gpu_block_dim(self.get_handle(), int(default_gpu_block_dim))
        ex = get_exception_to_throw_if_not_success(ret, get_last_error)
        if ex is not None:
            raise ex

    def get_gpu_max_reg(self):
        ret_gpu_max_reg = ctypes.c_int()
        ret = taichi_ccore.tie_CompileConfig_get_gpu_max_reg(self.get_handle(), ctypes.byref(ret_gpu_max_reg))
        ex = get_exception_to_throw_if_not_success(ret, get_last_error)
        if ex is not None:
            raise ex
        return (
            ret_gpu_max_reg.value    
        )

    def set_gpu_max_reg(self, gpu_max_reg):
        ret = taichi_ccore.tie_CompileConfig_set_gpu_max_reg(self.get_handle(), int(gpu_max_reg))
        ex = get_exception_to_throw_if_not_success(ret, get_last_error)
        if ex is not None:
            raise ex

    def get_saturating_grid_dim(self):
        ret_saturating_grid_dim = ctypes.c_int()
        ret = taichi_ccore.tie_CompileConfig_get_saturating_grid_dim(self.get_handle(), ctypes.byref(ret_saturating_grid_dim))
        ex = get_exception_to_throw_if_not_success(ret, get_last_error)
        if ex is not None:
            raise ex
        return (
            ret_saturating_grid_dim.value    
        )

    def set_saturating_grid_dim(self, saturating_grid_dim):
        ret = taichi_ccore.tie_CompileConfig_set_saturating_grid_dim(self.get_handle(), int(saturating_grid_dim))
        ex = get_exception_to_throw_if_not_success(ret, get_last_error)
        if ex is not None:
            raise ex

    def get_max_block_dim(self):
        ret_max_block_dim = ctypes.c_int()
        ret = taichi_ccore.tie_CompileConfig_get_max_block_dim(self.get_handle(), ctypes.byref(ret_max_block_dim))
        ex = get_exception_to_throw_if_not_success(ret, get_last_error)
        if ex is not None:
            raise ex
        return (
            ret_max_block_dim.value    
        )

    def set_max_block_dim(self, max_block_dim):
        ret = taichi_ccore.tie_CompileConfig_set_max_block_dim(self.get_handle(), int(max_block_dim))
        ex = get_exception_to_throw_if_not_success(ret, get_last_error)
        if ex is not None:
            raise ex

    def get_cpu_max_num_threads(self):
        ret_cpu_max_num_threads = ctypes.c_int()
        ret = taichi_ccore.tie_CompileConfig_get_cpu_max_num_threads(self.get_handle(), ctypes.byref(ret_cpu_max_num_threads))
        ex = get_exception_to_throw_if_not_success(ret, get_last_error)
        if ex is not None:
            raise ex
        return (
            ret_cpu_max_num_threads.value    
        )

    def set_cpu_max_num_threads(self, cpu_max_num_threads):
        ret = taichi_ccore.tie_CompileConfig_set_cpu_max_num_threads(self.get_handle(), int(cpu_max_num_threads))
        ex = get_exception_to_throw_if_not_success(ret, get_last_error)
        if ex is not None:
            raise ex

    def get_random_seed(self):
        ret_random_seed = ctypes.c_int()
        ret = taichi_ccore.tie_CompileConfig_get_random_seed(self.get_handle(), ctypes.byref(ret_random_seed))
        ex = get_exception_to_throw_if_not_success(ret, get_last_error)
        if ex is not None:
            raise ex
        return (
            ret_random_seed.value    
        )

    def set_random_seed(self, random_seed):
        ret = taichi_ccore.tie_CompileConfig_set_random_seed(self.get_handle(), int(random_seed))
        ex = get_exception_to_throw_if_not_success(ret, get_last_error)
        if ex is not None:
            raise ex

    def get_verbose_kernel_launches(self):
        ret_verbose_kernel_launches = ctypes.c_int()
        ret = taichi_ccore.tie_CompileConfig_get_verbose_kernel_launches(self.get_handle(), ctypes.byref(ret_verbose_kernel_launches))
        ex = get_exception_to_throw_if_not_success(ret, get_last_error)
        if ex is not None:
            raise ex
        return (
            bool(ret_verbose_kernel_launches.value)    
        )

    def set_verbose_kernel_launches(self, verbose_kernel_launches):
        ret = taichi_ccore.tie_CompileConfig_set_verbose_kernel_launches(self.get_handle(), bool(verbose_kernel_launches))
        ex = get_exception_to_throw_if_not_success(ret, get_last_error)
        if ex is not None:
            raise ex

    def get_verbose(self):
        ret_verbose = ctypes.c_int()
        ret = taichi_ccore.tie_CompileConfig_get_verbose(self.get_handle(), ctypes.byref(ret_verbose))
        ex = get_exception_to_throw_if_not_success(ret, get_last_error)
        if ex is not None:
            raise ex
        return (
            bool(ret_verbose.value)    
        )

    def set_verbose(self, verbose):
        ret = taichi_ccore.tie_CompileConfig_set_verbose(self.get_handle(), bool(verbose))
        ex = get_exception_to_throw_if_not_success(ret, get_last_error)
        if ex is not None:
            raise ex

    def get_demote_dense_struct_fors(self):
        ret_demote_dense_struct_fors = ctypes.c_int()
        ret = taichi_ccore.tie_CompileConfig_get_demote_dense_struct_fors(self.get_handle(), ctypes.byref(ret_demote_dense_struct_fors))
        ex = get_exception_to_throw_if_not_success(ret, get_last_error)
        if ex is not None:
            raise ex
        return (
            bool(ret_demote_dense_struct_fors.value)    
        )

    def set_demote_dense_struct_fors(self, demote_dense_struct_fors):
        ret = taichi_ccore.tie_CompileConfig_set_demote_dense_struct_fors(self.get_handle(), bool(demote_dense_struct_fors))
        ex = get_exception_to_throw_if_not_success(ret, get_last_error)
        if ex is not None:
            raise ex

    def get_kernel_profiler(self):
        ret_kernel_profiler = ctypes.c_int()
        ret = taichi_ccore.tie_CompileConfig_get_kernel_profiler(self.get_handle(), ctypes.byref(ret_kernel_profiler))
        ex = get_exception_to_throw_if_not_success(ret, get_last_error)
        if ex is not None:
            raise ex
        return (
            bool(ret_kernel_profiler.value)    
        )

    def set_kernel_profiler(self, kernel_profiler):
        ret = taichi_ccore.tie_CompileConfig_set_kernel_profiler(self.get_handle(), bool(kernel_profiler))
        ex = get_exception_to_throw_if_not_success(ret, get_last_error)
        if ex is not None:
            raise ex

    def get_timeline(self):
        ret_timeline = ctypes.c_int()
        ret = taichi_ccore.tie_CompileConfig_get_timeline(self.get_handle(), ctypes.byref(ret_timeline))
        ex = get_exception_to_throw_if_not_success(ret, get_last_error)
        if ex is not None:
            raise ex
        return (
            bool(ret_timeline.value)    
        )

    def set_timeline(self, timeline):
        ret = taichi_ccore.tie_CompileConfig_set_timeline(self.get_handle(), bool(timeline))
        ex = get_exception_to_throw_if_not_success(ret, get_last_error)
        if ex is not None:
            raise ex

    def get_default_fp(self):
        ret_default_fp = ctypes.c_void_p()
        ret = taichi_ccore.tie_CompileConfig_get_default_fp(self.get_handle(), ctypes.byref(ret_default_fp))
        ex = get_exception_to_throw_if_not_success(ret, get_last_error)
        if ex is not None:
            raise ex
        return (
            get_python_object_from_handle('TieDataTypeRef', ret_default_fp.value, manage_handle=False)    
        )

    def set_default_fp(self, default_fp):
        ret = taichi_ccore.tie_CompileConfig_set_default_fp(self.get_handle(), default_fp.get_handle())
        ex = get_exception_to_throw_if_not_success(ret, get_last_error)
        if ex is not None:
            raise ex

    def get_default_ip(self):
        ret_default_ip = ctypes.c_void_p()
        ret = taichi_ccore.tie_CompileConfig_get_default_ip(self.get_handle(), ctypes.byref(ret_default_ip))
        ex = get_exception_to_throw_if_not_success(ret, get_last_error)
        if ex is not None:
            raise ex
        return (
            get_python_object_from_handle('TieDataTypeRef', ret_default_ip.value, manage_handle=False)    
        )

    def set_default_ip(self, default_ip):
        ret = taichi_ccore.tie_CompileConfig_set_default_ip(self.get_handle(), default_ip.get_handle())
        ex = get_exception_to_throw_if_not_success(ret, get_last_error)
        if ex is not None:
            raise ex

    def get_default_up(self):
        ret_default_up = ctypes.c_void_p()
        ret = taichi_ccore.tie_CompileConfig_get_default_up(self.get_handle(), ctypes.byref(ret_default_up))
        ex = get_exception_to_throw_if_not_success(ret, get_last_error)
        if ex is not None:
            raise ex
        return (
            get_python_object_from_handle('TieDataTypeRef', ret_default_up.value, manage_handle=False)    
        )

    def set_default_up(self, default_up):
        ret = taichi_ccore.tie_CompileConfig_set_default_up(self.get_handle(), default_up.get_handle())
        ex = get_exception_to_throw_if_not_success(ret, get_last_error)
        if ex is not None:
            raise ex

    def get_device_memory_GB(self):
        ret_device_memory_GB = ctypes.c_double()
        ret = taichi_ccore.tie_CompileConfig_get_device_memory_GB(self.get_handle(), ctypes.byref(ret_device_memory_GB))
        ex = get_exception_to_throw_if_not_success(ret, get_last_error)
        if ex is not None:
            raise ex
        return (
            ret_device_memory_GB.value    
        )

    def set_device_memory_GB(self, device_memory_GB):
        ret = taichi_ccore.tie_CompileConfig_set_device_memory_GB(self.get_handle(), float(device_memory_GB))
        ex = get_exception_to_throw_if_not_success(ret, get_last_error)
        if ex is not None:
            raise ex

    def get_device_memory_fraction(self):
        ret_device_memory_fraction = ctypes.c_double()
        ret = taichi_ccore.tie_CompileConfig_get_device_memory_fraction(self.get_handle(), ctypes.byref(ret_device_memory_fraction))
        ex = get_exception_to_throw_if_not_success(ret, get_last_error)
        if ex is not None:
            raise ex
        return (
            ret_device_memory_fraction.value    
        )

    def set_device_memory_fraction(self, device_memory_fraction):
        ret = taichi_ccore.tie_CompileConfig_set_device_memory_fraction(self.get_handle(), float(device_memory_fraction))
        ex = get_exception_to_throw_if_not_success(ret, get_last_error)
        if ex is not None:
            raise ex

    def get_fast_math(self):
        ret_fast_math = ctypes.c_int()
        ret = taichi_ccore.tie_CompileConfig_get_fast_math(self.get_handle(), ctypes.byref(ret_fast_math))
        ex = get_exception_to_throw_if_not_success(ret, get_last_error)
        if ex is not None:
            raise ex
        return (
            bool(ret_fast_math.value)    
        )

    def set_fast_math(self, fast_math):
        ret = taichi_ccore.tie_CompileConfig_set_fast_math(self.get_handle(), bool(fast_math))
        ex = get_exception_to_throw_if_not_success(ret, get_last_error)
        if ex is not None:
            raise ex

    def get_advanced_optimization(self):
        ret_advanced_optimization = ctypes.c_int()
        ret = taichi_ccore.tie_CompileConfig_get_advanced_optimization(self.get_handle(), ctypes.byref(ret_advanced_optimization))
        ex = get_exception_to_throw_if_not_success(ret, get_last_error)
        if ex is not None:
            raise ex
        return (
            bool(ret_advanced_optimization.value)    
        )

    def set_advanced_optimization(self, advanced_optimization):
        ret = taichi_ccore.tie_CompileConfig_set_advanced_optimization(self.get_handle(), bool(advanced_optimization))
        ex = get_exception_to_throw_if_not_success(ret, get_last_error)
        if ex is not None:
            raise ex

    def get_ad_stack_size(self):
        ret_ad_stack_size = ctypes.c_int()
        ret = taichi_ccore.tie_CompileConfig_get_ad_stack_size(self.get_handle(), ctypes.byref(ret_ad_stack_size))
        ex = get_exception_to_throw_if_not_success(ret, get_last_error)
        if ex is not None:
            raise ex
        return (
            ret_ad_stack_size.value    
        )

    def set_ad_stack_size(self, ad_stack_size):
        ret = taichi_ccore.tie_CompileConfig_set_ad_stack_size(self.get_handle(), int(ad_stack_size))
        ex = get_exception_to_throw_if_not_success(ret, get_last_error)
        if ex is not None:
            raise ex

    def get_flatten_if(self):
        ret_flatten_if = ctypes.c_int()
        ret = taichi_ccore.tie_CompileConfig_get_flatten_if(self.get_handle(), ctypes.byref(ret_flatten_if))
        ex = get_exception_to_throw_if_not_success(ret, get_last_error)
        if ex is not None:
            raise ex
        return (
            bool(ret_flatten_if.value)    
        )

    def set_flatten_if(self, flatten_if):
        ret = taichi_ccore.tie_CompileConfig_set_flatten_if(self.get_handle(), bool(flatten_if))
        ex = get_exception_to_throw_if_not_success(ret, get_last_error)
        if ex is not None:
            raise ex

    def get_make_thread_local(self):
        ret_make_thread_local = ctypes.c_int()
        ret = taichi_ccore.tie_CompileConfig_get_make_thread_local(self.get_handle(), ctypes.byref(ret_make_thread_local))
        ex = get_exception_to_throw_if_not_success(ret, get_last_error)
        if ex is not None:
            raise ex
        return (
            bool(ret_make_thread_local.value)    
        )

    def set_make_thread_local(self, make_thread_local):
        ret = taichi_ccore.tie_CompileConfig_set_make_thread_local(self.get_handle(), bool(make_thread_local))
        ex = get_exception_to_throw_if_not_success(ret, get_last_error)
        if ex is not None:
            raise ex

    def get_make_block_local(self):
        ret_make_block_local = ctypes.c_int()
        ret = taichi_ccore.tie_CompileConfig_get_make_block_local(self.get_handle(), ctypes.byref(ret_make_block_local))
        ex = get_exception_to_throw_if_not_success(ret, get_last_error)
        if ex is not None:
            raise ex
        return (
            bool(ret_make_block_local.value)    
        )

    def set_make_block_local(self, make_block_local):
        ret = taichi_ccore.tie_CompileConfig_set_make_block_local(self.get_handle(), bool(make_block_local))
        ex = get_exception_to_throw_if_not_success(ret, get_last_error)
        if ex is not None:
            raise ex

    def get_detect_read_only(self):
        ret_detect_read_only = ctypes.c_int()
        ret = taichi_ccore.tie_CompileConfig_get_detect_read_only(self.get_handle(), ctypes.byref(ret_detect_read_only))
        ex = get_exception_to_throw_if_not_success(ret, get_last_error)
        if ex is not None:
            raise ex
        return (
            bool(ret_detect_read_only.value)    
        )

    def set_detect_read_only(self, detect_read_only):
        ret = taichi_ccore.tie_CompileConfig_set_detect_read_only(self.get_handle(), bool(detect_read_only))
        ex = get_exception_to_throw_if_not_success(ret, get_last_error)
        if ex is not None:
            raise ex

    def get_real_matrix_scalarize(self):
        ret_real_matrix_scalarize = ctypes.c_int()
        ret = taichi_ccore.tie_CompileConfig_get_real_matrix_scalarize(self.get_handle(), ctypes.byref(ret_real_matrix_scalarize))
        ex = get_exception_to_throw_if_not_success(ret, get_last_error)
        if ex is not None:
            raise ex
        return (
            bool(ret_real_matrix_scalarize.value)    
        )

    def set_real_matrix_scalarize(self, real_matrix_scalarize):
        ret = taichi_ccore.tie_CompileConfig_set_real_matrix_scalarize(self.get_handle(), bool(real_matrix_scalarize))
        ex = get_exception_to_throw_if_not_success(ret, get_last_error)
        if ex is not None:
            raise ex

    def get_half2_vectorization(self):
        ret_half2_vectorization = ctypes.c_int()
        ret = taichi_ccore.tie_CompileConfig_get_half2_vectorization(self.get_handle(), ctypes.byref(ret_half2_vectorization))
        ex = get_exception_to_throw_if_not_success(ret, get_last_error)
        if ex is not None:
            raise ex
        return (
            bool(ret_half2_vectorization.value)    
        )

    def set_half2_vectorization(self, half2_vectorization):
        ret = taichi_ccore.tie_CompileConfig_set_half2_vectorization(self.get_handle(), bool(half2_vectorization))
        ex = get_exception_to_throw_if_not_success(ret, get_last_error)
        if ex is not None:
            raise ex

    def get_make_cpu_multithreading_loop(self):
        ret_make_cpu_multithreading_loop = ctypes.c_int()
        ret = taichi_ccore.tie_CompileConfig_get_make_cpu_multithreading_loop(self.get_handle(), ctypes.byref(ret_make_cpu_multithreading_loop))
        ex = get_exception_to_throw_if_not_success(ret, get_last_error)
        if ex is not None:
            raise ex
        return (
            bool(ret_make_cpu_multithreading_loop.value)    
        )

    def set_make_cpu_multithreading_loop(self, make_cpu_multithreading_loop):
        ret = taichi_ccore.tie_CompileConfig_set_make_cpu_multithreading_loop(self.get_handle(), bool(make_cpu_multithreading_loop))
        ex = get_exception_to_throw_if_not_success(ret, get_last_error)
        if ex is not None:
            raise ex

    def get_quant_opt_store_fusion(self):
        ret_quant_opt_store_fusion = ctypes.c_int()
        ret = taichi_ccore.tie_CompileConfig_get_quant_opt_store_fusion(self.get_handle(), ctypes.byref(ret_quant_opt_store_fusion))
        ex = get_exception_to_throw_if_not_success(ret, get_last_error)
        if ex is not None:
            raise ex
        return (
            bool(ret_quant_opt_store_fusion.value)    
        )

    def set_quant_opt_store_fusion(self, quant_opt_store_fusion):
        ret = taichi_ccore.tie_CompileConfig_set_quant_opt_store_fusion(self.get_handle(), bool(quant_opt_store_fusion))
        ex = get_exception_to_throw_if_not_success(ret, get_last_error)
        if ex is not None:
            raise ex

    def get_quant_opt_atomic_demotion(self):
        ret_quant_opt_atomic_demotion = ctypes.c_int()
        ret = taichi_ccore.tie_CompileConfig_get_quant_opt_atomic_demotion(self.get_handle(), ctypes.byref(ret_quant_opt_atomic_demotion))
        ex = get_exception_to_throw_if_not_success(ret, get_last_error)
        if ex is not None:
            raise ex
        return (
            bool(ret_quant_opt_atomic_demotion.value)    
        )

    def set_quant_opt_atomic_demotion(self, quant_opt_atomic_demotion):
        ret = taichi_ccore.tie_CompileConfig_set_quant_opt_atomic_demotion(self.get_handle(), bool(quant_opt_atomic_demotion))
        ex = get_exception_to_throw_if_not_success(ret, get_last_error)
        if ex is not None:
            raise ex

    def get_allow_nv_shader_extension(self):
        ret_allow_nv_shader_extension = ctypes.c_int()
        ret = taichi_ccore.tie_CompileConfig_get_allow_nv_shader_extension(self.get_handle(), ctypes.byref(ret_allow_nv_shader_extension))
        ex = get_exception_to_throw_if_not_success(ret, get_last_error)
        if ex is not None:
            raise ex
        return (
            bool(ret_allow_nv_shader_extension.value)    
        )

    def set_allow_nv_shader_extension(self, allow_nv_shader_extension):
        ret = taichi_ccore.tie_CompileConfig_set_allow_nv_shader_extension(self.get_handle(), bool(allow_nv_shader_extension))
        ex = get_exception_to_throw_if_not_success(ret, get_last_error)
        if ex is not None:
            raise ex

    def get_make_mesh_block_local(self):
        ret_make_mesh_block_local = ctypes.c_int()
        ret = taichi_ccore.tie_CompileConfig_get_make_mesh_block_local(self.get_handle(), ctypes.byref(ret_make_mesh_block_local))
        ex = get_exception_to_throw_if_not_success(ret, get_last_error)
        if ex is not None:
            raise ex
        return (
            bool(ret_make_mesh_block_local.value)    
        )

    def set_make_mesh_block_local(self, make_mesh_block_local):
        ret = taichi_ccore.tie_CompileConfig_set_make_mesh_block_local(self.get_handle(), bool(make_mesh_block_local))
        ex = get_exception_to_throw_if_not_success(ret, get_last_error)
        if ex is not None:
            raise ex

    def get_mesh_localize_to_end_mapping(self):
        ret_mesh_localize_to_end_mapping = ctypes.c_int()
        ret = taichi_ccore.tie_CompileConfig_get_mesh_localize_to_end_mapping(self.get_handle(), ctypes.byref(ret_mesh_localize_to_end_mapping))
        ex = get_exception_to_throw_if_not_success(ret, get_last_error)
        if ex is not None:
            raise ex
        return (
            bool(ret_mesh_localize_to_end_mapping.value)    
        )

    def set_mesh_localize_to_end_mapping(self, mesh_localize_to_end_mapping):
        ret = taichi_ccore.tie_CompileConfig_set_mesh_localize_to_end_mapping(self.get_handle(), bool(mesh_localize_to_end_mapping))
        ex = get_exception_to_throw_if_not_success(ret, get_last_error)
        if ex is not None:
            raise ex

    def get_mesh_localize_from_end_mapping(self):
        ret_mesh_localize_from_end_mapping = ctypes.c_int()
        ret = taichi_ccore.tie_CompileConfig_get_mesh_localize_from_end_mapping(self.get_handle(), ctypes.byref(ret_mesh_localize_from_end_mapping))
        ex = get_exception_to_throw_if_not_success(ret, get_last_error)
        if ex is not None:
            raise ex
        return (
            bool(ret_mesh_localize_from_end_mapping.value)    
        )

    def set_mesh_localize_from_end_mapping(self, mesh_localize_from_end_mapping):
        ret = taichi_ccore.tie_CompileConfig_set_mesh_localize_from_end_mapping(self.get_handle(), bool(mesh_localize_from_end_mapping))
        ex = get_exception_to_throw_if_not_success(ret, get_last_error)
        if ex is not None:
            raise ex

    def get_optimize_mesh_reordered_mapping(self):
        ret_optimize_mesh_reordered_mapping = ctypes.c_int()
        ret = taichi_ccore.tie_CompileConfig_get_optimize_mesh_reordered_mapping(self.get_handle(), ctypes.byref(ret_optimize_mesh_reordered_mapping))
        ex = get_exception_to_throw_if_not_success(ret, get_last_error)
        if ex is not None:
            raise ex
        return (
            bool(ret_optimize_mesh_reordered_mapping.value)    
        )

    def set_optimize_mesh_reordered_mapping(self, optimize_mesh_reordered_mapping):
        ret = taichi_ccore.tie_CompileConfig_set_optimize_mesh_reordered_mapping(self.get_handle(), bool(optimize_mesh_reordered_mapping))
        ex = get_exception_to_throw_if_not_success(ret, get_last_error)
        if ex is not None:
            raise ex

    def get_mesh_localize_all_attr_mappings(self):
        ret_mesh_localize_all_attr_mappings = ctypes.c_int()
        ret = taichi_ccore.tie_CompileConfig_get_mesh_localize_all_attr_mappings(self.get_handle(), ctypes.byref(ret_mesh_localize_all_attr_mappings))
        ex = get_exception_to_throw_if_not_success(ret, get_last_error)
        if ex is not None:
            raise ex
        return (
            bool(ret_mesh_localize_all_attr_mappings.value)    
        )

    def set_mesh_localize_all_attr_mappings(self, mesh_localize_all_attr_mappings):
        ret = taichi_ccore.tie_CompileConfig_set_mesh_localize_all_attr_mappings(self.get_handle(), bool(mesh_localize_all_attr_mappings))
        ex = get_exception_to_throw_if_not_success(ret, get_last_error)
        if ex is not None:
            raise ex

    def get_demote_no_access_mesh_fors(self):
        ret_demote_no_access_mesh_fors = ctypes.c_int()
        ret = taichi_ccore.tie_CompileConfig_get_demote_no_access_mesh_fors(self.get_handle(), ctypes.byref(ret_demote_no_access_mesh_fors))
        ex = get_exception_to_throw_if_not_success(ret, get_last_error)
        if ex is not None:
            raise ex
        return (
            bool(ret_demote_no_access_mesh_fors.value)    
        )

    def set_demote_no_access_mesh_fors(self, demote_no_access_mesh_fors):
        ret = taichi_ccore.tie_CompileConfig_set_demote_no_access_mesh_fors(self.get_handle(), bool(demote_no_access_mesh_fors))
        ex = get_exception_to_throw_if_not_success(ret, get_last_error)
        if ex is not None:
            raise ex

    def get_experimental_auto_mesh_local(self):
        ret_experimental_auto_mesh_local = ctypes.c_int()
        ret = taichi_ccore.tie_CompileConfig_get_experimental_auto_mesh_local(self.get_handle(), ctypes.byref(ret_experimental_auto_mesh_local))
        ex = get_exception_to_throw_if_not_success(ret, get_last_error)
        if ex is not None:
            raise ex
        return (
            bool(ret_experimental_auto_mesh_local.value)    
        )

    def set_experimental_auto_mesh_local(self, experimental_auto_mesh_local):
        ret = taichi_ccore.tie_CompileConfig_set_experimental_auto_mesh_local(self.get_handle(), bool(experimental_auto_mesh_local))
        ex = get_exception_to_throw_if_not_success(ret, get_last_error)
        if ex is not None:
            raise ex

    def get_auto_mesh_local_default_occupacy(self):
        ret_auto_mesh_local_default_occupacy = ctypes.c_int()
        ret = taichi_ccore.tie_CompileConfig_get_auto_mesh_local_default_occupacy(self.get_handle(), ctypes.byref(ret_auto_mesh_local_default_occupacy))
        ex = get_exception_to_throw_if_not_success(ret, get_last_error)
        if ex is not None:
            raise ex
        return (
            ret_auto_mesh_local_default_occupacy.value    
        )

    def set_auto_mesh_local_default_occupacy(self, auto_mesh_local_default_occupacy):
        ret = taichi_ccore.tie_CompileConfig_set_auto_mesh_local_default_occupacy(self.get_handle(), int(auto_mesh_local_default_occupacy))
        ex = get_exception_to_throw_if_not_success(ret, get_last_error)
        if ex is not None:
            raise ex

    def get_offline_cache(self):
        ret_offline_cache = ctypes.c_int()
        ret = taichi_ccore.tie_CompileConfig_get_offline_cache(self.get_handle(), ctypes.byref(ret_offline_cache))
        ex = get_exception_to_throw_if_not_success(ret, get_last_error)
        if ex is not None:
            raise ex
        return (
            bool(ret_offline_cache.value)    
        )

    def set_offline_cache(self, offline_cache):
        ret = taichi_ccore.tie_CompileConfig_set_offline_cache(self.get_handle(), bool(offline_cache))
        ex = get_exception_to_throw_if_not_success(ret, get_last_error)
        if ex is not None:
            raise ex

    def get_offline_cache_file_path(self):
        ret_offline_cache_file_path = ctypes.c_char_p()
        ret = taichi_ccore.tie_CompileConfig_get_offline_cache_file_path(self.get_handle(), ctypes.byref(ret_offline_cache_file_path))
        ex = get_exception_to_throw_if_not_success(ret, get_last_error)
        if ex is not None:
            raise ex
        return (
            ctypes.string_at(ret_offline_cache_file_path.value).decode("utf-8")    
        )

    def set_offline_cache_file_path(self, offline_cache_file_path):
        ret = taichi_ccore.tie_CompileConfig_set_offline_cache_file_path(self.get_handle(), offline_cache_file_path.encode("utf-8"))
        ex = get_exception_to_throw_if_not_success(ret, get_last_error)
        if ex is not None:
            raise ex

    def get_offline_cache_cleaning_policy(self):
        ret_offline_cache_cleaning_policy = ctypes.c_char_p()
        ret = taichi_ccore.tie_CompileConfig_get_offline_cache_cleaning_policy(self.get_handle(), ctypes.byref(ret_offline_cache_cleaning_policy))
        ex = get_exception_to_throw_if_not_success(ret, get_last_error)
        if ex is not None:
            raise ex
        return (
            ctypes.string_at(ret_offline_cache_cleaning_policy.value).decode("utf-8")    
        )

    def set_offline_cache_cleaning_policy(self, offline_cache_cleaning_policy):
        ret = taichi_ccore.tie_CompileConfig_set_offline_cache_cleaning_policy(self.get_handle(), offline_cache_cleaning_policy.encode("utf-8"))
        ex = get_exception_to_throw_if_not_success(ret, get_last_error)
        if ex is not None:
            raise ex

    def get_offline_cache_max_size_of_files(self):
        ret_offline_cache_max_size_of_files = ctypes.c_int()
        ret = taichi_ccore.tie_CompileConfig_get_offline_cache_max_size_of_files(self.get_handle(), ctypes.byref(ret_offline_cache_max_size_of_files))
        ex = get_exception_to_throw_if_not_success(ret, get_last_error)
        if ex is not None:
            raise ex
        return (
            ret_offline_cache_max_size_of_files.value    
        )

    def set_offline_cache_max_size_of_files(self, offline_cache_max_size_of_files):
        ret = taichi_ccore.tie_CompileConfig_set_offline_cache_max_size_of_files(self.get_handle(), int(offline_cache_max_size_of_files))
        ex = get_exception_to_throw_if_not_success(ret, get_last_error)
        if ex is not None:
            raise ex

    def get_offline_cache_cleaning_factor(self):
        ret_offline_cache_cleaning_factor = ctypes.c_double()
        ret = taichi_ccore.tie_CompileConfig_get_offline_cache_cleaning_factor(self.get_handle(), ctypes.byref(ret_offline_cache_cleaning_factor))
        ex = get_exception_to_throw_if_not_success(ret, get_last_error)
        if ex is not None:
            raise ex
        return (
            ret_offline_cache_cleaning_factor.value    
        )

    def set_offline_cache_cleaning_factor(self, offline_cache_cleaning_factor):
        ret = taichi_ccore.tie_CompileConfig_set_offline_cache_cleaning_factor(self.get_handle(), float(offline_cache_cleaning_factor))
        ex = get_exception_to_throw_if_not_success(ret, get_last_error)
        if ex is not None:
            raise ex

    def get_num_compile_threads(self):
        ret_num_compile_threads = ctypes.c_int()
        ret = taichi_ccore.tie_CompileConfig_get_num_compile_threads(self.get_handle(), ctypes.byref(ret_num_compile_threads))
        ex = get_exception_to_throw_if_not_success(ret, get_last_error)
        if ex is not None:
            raise ex
        return (
            ret_num_compile_threads.value    
        )

    def set_num_compile_threads(self, num_compile_threads):
        ret = taichi_ccore.tie_CompileConfig_set_num_compile_threads(self.get_handle(), int(num_compile_threads))
        ex = get_exception_to_throw_if_not_success(ret, get_last_error)
        if ex is not None:
            raise ex

    def get_vk_api_version(self):
        ret_vk_api_version = ctypes.c_char_p()
        ret = taichi_ccore.tie_CompileConfig_get_vk_api_version(self.get_handle(), ctypes.byref(ret_vk_api_version))
        ex = get_exception_to_throw_if_not_success(ret, get_last_error)
        if ex is not None:
            raise ex
        return (
            ctypes.string_at(ret_vk_api_version.value).decode("utf-8")    
        )

    def set_vk_api_version(self, vk_api_version):
        ret = taichi_ccore.tie_CompileConfig_set_vk_api_version(self.get_handle(), vk_api_version.encode("utf-8"))
        ex = get_exception_to_throw_if_not_success(ret, get_last_error)
        if ex is not None:
            raise ex

    def get_cuda_stack_limit(self):
        ret_cuda_stack_limit = ctypes.c_size_t()
        ret = taichi_ccore.tie_CompileConfig_get_cuda_stack_limit(self.get_handle(), ctypes.byref(ret_cuda_stack_limit))
        ex = get_exception_to_throw_if_not_success(ret, get_last_error)
        if ex is not None:
            raise ex
        return (
            ret_cuda_stack_limit.value    
        )

    def set_cuda_stack_limit(self, cuda_stack_limit):
        ret = taichi_ccore.tie_CompileConfig_set_cuda_stack_limit(self.get_handle(), int(cuda_stack_limit))
        ex = get_exception_to_throw_if_not_success(ret, get_last_error)
        if ex is not None:
            raise ex

    arch = property(get_arch, set_arch)
    opt_level = property(get_opt_level, set_opt_level)
    print_ir = property(get_print_ir, set_print_ir)
    print_preprocessed_ir = property(get_print_preprocessed_ir, set_print_preprocessed_ir)
    debug = property(get_debug, set_debug)
    cfg_optimization = property(get_cfg_optimization, set_cfg_optimization)
    check_out_of_bound = property(get_check_out_of_bound, set_check_out_of_bound)
    print_accessor_ir = property(get_print_accessor_ir, set_print_accessor_ir)
    use_llvm = property(get_use_llvm, set_use_llvm)
    print_struct_llvm_ir = property(get_print_struct_llvm_ir, set_print_struct_llvm_ir)
    print_kernel_llvm_ir = property(get_print_kernel_llvm_ir, set_print_kernel_llvm_ir)
    print_kernel_llvm_ir_optimized = property(get_print_kernel_llvm_ir_optimized, set_print_kernel_llvm_ir_optimized)
    print_kernel_asm = property(get_print_kernel_asm, set_print_kernel_asm)
    print_kernel_amdgcn = property(get_print_kernel_amdgcn, set_print_kernel_amdgcn)
    simplify_before_lower_access = property(get_simplify_before_lower_access, set_simplify_before_lower_access)
    simplify_after_lower_access = property(get_simplify_after_lower_access, set_simplify_after_lower_access)
    lower_access = property(get_lower_access, set_lower_access)
    move_loop_invariant_outside_if = property(get_move_loop_invariant_outside_if, set_move_loop_invariant_outside_if)
    cache_loop_invariant_global_vars = property(get_cache_loop_invariant_global_vars, set_cache_loop_invariant_global_vars)
    default_cpu_block_dim = property(get_default_cpu_block_dim, set_default_cpu_block_dim)
    cpu_block_dim_adaptive = property(get_cpu_block_dim_adaptive, set_cpu_block_dim_adaptive)
    default_gpu_block_dim = property(get_default_gpu_block_dim, set_default_gpu_block_dim)
    gpu_max_reg = property(get_gpu_max_reg, set_gpu_max_reg)
    saturating_grid_dim = property(get_saturating_grid_dim, set_saturating_grid_dim)
    max_block_dim = property(get_max_block_dim, set_max_block_dim)
    cpu_max_num_threads = property(get_cpu_max_num_threads, set_cpu_max_num_threads)
    random_seed = property(get_random_seed, set_random_seed)
    verbose_kernel_launches = property(get_verbose_kernel_launches, set_verbose_kernel_launches)
    verbose = property(get_verbose, set_verbose)
    demote_dense_struct_fors = property(get_demote_dense_struct_fors, set_demote_dense_struct_fors)
    kernel_profiler = property(get_kernel_profiler, set_kernel_profiler)
    timeline = property(get_timeline, set_timeline)
    default_fp = property(get_default_fp, set_default_fp)
    default_ip = property(get_default_ip, set_default_ip)
    default_up = property(get_default_up, set_default_up)
    device_memory_GB = property(get_device_memory_GB, set_device_memory_GB)
    device_memory_fraction = property(get_device_memory_fraction, set_device_memory_fraction)
    fast_math = property(get_fast_math, set_fast_math)
    advanced_optimization = property(get_advanced_optimization, set_advanced_optimization)
    ad_stack_size = property(get_ad_stack_size, set_ad_stack_size)
    flatten_if = property(get_flatten_if, set_flatten_if)
    make_thread_local = property(get_make_thread_local, set_make_thread_local)
    make_block_local = property(get_make_block_local, set_make_block_local)
    detect_read_only = property(get_detect_read_only, set_detect_read_only)
    real_matrix_scalarize = property(get_real_matrix_scalarize, set_real_matrix_scalarize)
    half2_vectorization = property(get_half2_vectorization, set_half2_vectorization)
    make_cpu_multithreading_loop = property(get_make_cpu_multithreading_loop, set_make_cpu_multithreading_loop)
    quant_opt_store_fusion = property(get_quant_opt_store_fusion, set_quant_opt_store_fusion)
    quant_opt_atomic_demotion = property(get_quant_opt_atomic_demotion, set_quant_opt_atomic_demotion)
    allow_nv_shader_extension = property(get_allow_nv_shader_extension, set_allow_nv_shader_extension)
    make_mesh_block_local = property(get_make_mesh_block_local, set_make_mesh_block_local)
    mesh_localize_to_end_mapping = property(get_mesh_localize_to_end_mapping, set_mesh_localize_to_end_mapping)
    mesh_localize_from_end_mapping = property(get_mesh_localize_from_end_mapping, set_mesh_localize_from_end_mapping)
    optimize_mesh_reordered_mapping = property(get_optimize_mesh_reordered_mapping, set_optimize_mesh_reordered_mapping)
    mesh_localize_all_attr_mappings = property(get_mesh_localize_all_attr_mappings, set_mesh_localize_all_attr_mappings)
    demote_no_access_mesh_fors = property(get_demote_no_access_mesh_fors, set_demote_no_access_mesh_fors)
    experimental_auto_mesh_local = property(get_experimental_auto_mesh_local, set_experimental_auto_mesh_local)
    auto_mesh_local_default_occupacy = property(get_auto_mesh_local_default_occupacy, set_auto_mesh_local_default_occupacy)
    offline_cache = property(get_offline_cache, set_offline_cache)
    offline_cache_file_path = property(get_offline_cache_file_path, set_offline_cache_file_path)
    offline_cache_cleaning_policy = property(get_offline_cache_cleaning_policy, set_offline_cache_cleaning_policy)
    offline_cache_max_size_of_files = property(get_offline_cache_max_size_of_files, set_offline_cache_max_size_of_files)
    offline_cache_cleaning_factor = property(get_offline_cache_cleaning_factor, set_offline_cache_cleaning_factor)
    num_compile_threads = property(get_num_compile_threads, set_num_compile_threads)
    vk_api_version = property(get_vk_api_version, set_vk_api_version)
    cuda_stack_limit = property(get_cuda_stack_limit, set_cuda_stack_limit)


if hasattr(taichi_ccore, 'tie_CompileConfig_destroy'):
    destroy_fn_addr = ctypes.addressof(taichi_ccore.tie_CompileConfig_destroy)
    destroy_fn_addr = ctypes.c_void_p.from_address(destroy_fn_addr).value
    CompileConfig._tie_api_tp_finalize = destroy_fn_addr
    set_pytype_tp_finalize(id(CompileConfig))


__all__ = ['CompileConfig']

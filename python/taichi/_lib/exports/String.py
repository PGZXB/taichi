# This file is auto-generated by misc/exports_to_py.py
# DO NOT edit this file manually!
# To regenerate this file, run:
#     python misc/exports_to_py.py

import ctypes
from .ccore import taichi_ccore
from .utils import get_exception_to_throw_if_not_success, get_python_object_from_handle, wrap_callback_to_c


from .global_functions import get_last_error

from .global_functions import set_pytype_tp_finalize


# Class String
class String:
    def __init__(self, *args, handle=None, manage_handle=False):
        if handle is not None:
            self._manage_handle = manage_handle
            self._handle = handle
        else:
            self._manage_handle = True
            self._handle = self.create(*args)

    def get_handle(self):
        return self._handle

    @staticmethod
    def create(str):
        ret_handle = ctypes.c_void_p()
        ret = taichi_ccore.tie_String_create(str.encode("utf-8"), ctypes.byref(ret_handle))
        ex = get_exception_to_throw_if_not_success(ret, get_last_error)
        if ex is not None:
            raise ex
        return (
            ret_handle.value    
        )

    def destroy(self):
        ret = taichi_ccore.tie_String_destroy(self.get_handle())
        ex = get_exception_to_throw_if_not_success(ret, get_last_error)
        if ex is not None:
            raise ex

    def c_str(self):
        ret_c_str = ctypes.c_char_p()
        ret = taichi_ccore.tie_String_c_str(self.get_handle(), ctypes.byref(ret_c_str))
        ex = get_exception_to_throw_if_not_success(ret, get_last_error)
        if ex is not None:
            raise ex
        return (
            ctypes.string_at(ret_c_str.value).decode("utf-8")    
        )

    def size(self):
        ret_size = ctypes.c_size_t()
        ret = taichi_ccore.tie_String_size(self.get_handle(), ctypes.byref(ret_size))
        ex = get_exception_to_throw_if_not_success(ret, get_last_error)
        if ex is not None:
            raise ex
        return (
            ret_size.value    
        )

    def __len__(self):
        return self.size()

    def __str__(self):
        return self.c_str()



if hasattr(taichi_ccore, 'tie_String_destroy'):
    destroy_fn_addr = ctypes.addressof(taichi_ccore.tie_String_destroy)
    destroy_fn_addr = ctypes.c_void_p.from_address(destroy_fn_addr).value
    String._tie_api_tp_finalize = destroy_fn_addr
    set_pytype_tp_finalize(id(String))


__all__ = ['String']

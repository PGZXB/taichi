# This file is auto-generated by misc/exports_to_py.py
# DO NOT edit this file manually!
# To regenerate this file, run:
#     python misc/exports_to_py.py

import ctypes
from .ccore import taichi_ccore
from .utils import get_exception_to_throw_if_not_success, get_python_object_from_handle, wrap_callback_to_c


from .global_functions import get_last_error

from .global_functions import set_pytype_tp_finalize


# Class LaunchContextBuilder
class LaunchContextBuilder:
    def __init__(self, *args, handle=None, manage_handle=False):
        if handle is not None:
            self._manage_handle = manage_handle
            self._handle = handle
        else:
            self._manage_handle = True
            self._handle = self.create(*args)

    def get_handle(self):
        return self._handle

    @staticmethod
    def create(kernel_handle):
        ret_handle = ctypes.c_void_p()
        ret = taichi_ccore.tie_LaunchContextBuilder_create(kernel_handle.get_handle(), ctypes.byref(ret_handle))
        ex = get_exception_to_throw_if_not_success(ret, get_last_error)
        if ex is not None:
            raise ex
        return (
            ret_handle.value    
        )

    def destroy(self):
        ret = taichi_ccore.tie_LaunchContextBuilder_destroy(self.get_handle())
        ex = get_exception_to_throw_if_not_success(ret, get_last_error)
        if ex is not None:
            raise ex

    def set_arg_int(self, arg_id, i64):
        ret = taichi_ccore.tie_LaunchContextBuilder_set_arg_int(self.get_handle(), int(arg_id), int(i64))
        ex = get_exception_to_throw_if_not_success(ret, get_last_error)
        if ex is not None:
            raise ex

    def set_arg_uint(self, arg_id, u64):
        ret = taichi_ccore.tie_LaunchContextBuilder_set_arg_uint(self.get_handle(), int(arg_id), int(u64))
        ex = get_exception_to_throw_if_not_success(ret, get_last_error)
        if ex is not None:
            raise ex

    def set_arg_float(self, arg_id, d):
        ret = taichi_ccore.tie_LaunchContextBuilder_set_arg_float(self.get_handle(), int(arg_id), float(d))
        ex = get_exception_to_throw_if_not_success(ret, get_last_error)
        if ex is not None:
            raise ex

    def set_struct_arg_int(self, ap_arg_indices, i64):
        ap_arg_indices = (ctypes.c_int * len(ap_arg_indices))(*ap_arg_indices)
        ret = taichi_ccore.tie_LaunchContextBuilder_set_struct_arg_int(self.get_handle(), ap_arg_indices, len(ap_arg_indices), int(i64))
        ex = get_exception_to_throw_if_not_success(ret, get_last_error)
        if ex is not None:
            raise ex

    def set_struct_arg_uint(self, ap_arg_indices, u64):
        ap_arg_indices = (ctypes.c_int * len(ap_arg_indices))(*ap_arg_indices)
        ret = taichi_ccore.tie_LaunchContextBuilder_set_struct_arg_uint(self.get_handle(), ap_arg_indices, len(ap_arg_indices), int(u64))
        ex = get_exception_to_throw_if_not_success(ret, get_last_error)
        if ex is not None:
            raise ex

    def set_struct_arg_float(self, ap_arg_indices, d):
        ap_arg_indices = (ctypes.c_int * len(ap_arg_indices))(*ap_arg_indices)
        ret = taichi_ccore.tie_LaunchContextBuilder_set_struct_arg_float(self.get_handle(), ap_arg_indices, len(ap_arg_indices), float(d))
        ex = get_exception_to_throw_if_not_success(ret, get_last_error)
        if ex is not None:
            raise ex

    def set_arg_external_array_with_shape(self, arg_id, ptr, size, ap_shape, grad_ptr):
        ap_shape = (ctypes.c_int64 * len(ap_shape))(*ap_shape)
        ret = taichi_ccore.tie_LaunchContextBuilder_set_arg_external_array_with_shape(self.get_handle(), int(arg_id), int(ptr), int(size), ap_shape, len(ap_shape), int(grad_ptr))
        ex = get_exception_to_throw_if_not_success(ret, get_last_error)
        if ex is not None:
            raise ex

    def set_arg_ndarray(self, arg_id, arr):
        ret = taichi_ccore.tie_LaunchContextBuilder_set_arg_ndarray(self.get_handle(), int(arg_id), arr.get_handle())
        ex = get_exception_to_throw_if_not_success(ret, get_last_error)
        if ex is not None:
            raise ex

    def set_arg_ndarray_with_grad(self, arg_id, arr, arr_grad):
        ret = taichi_ccore.tie_LaunchContextBuilder_set_arg_ndarray_with_grad(self.get_handle(), int(arg_id), arr.get_handle(), arr_grad.get_handle())
        ex = get_exception_to_throw_if_not_success(ret, get_last_error)
        if ex is not None:
            raise ex

    def set_arg_texture(self, arg_id, tex):
        ret = taichi_ccore.tie_LaunchContextBuilder_set_arg_texture(self.get_handle(), int(arg_id), tex.get_handle())
        ex = get_exception_to_throw_if_not_success(ret, get_last_error)
        if ex is not None:
            raise ex

    def set_arg_rw_texture(self, arg_id, tex):
        ret = taichi_ccore.tie_LaunchContextBuilder_set_arg_rw_texture(self.get_handle(), int(arg_id), tex.get_handle())
        ex = get_exception_to_throw_if_not_success(ret, get_last_error)
        if ex is not None:
            raise ex

    def get_struct_ret_int(self, ap_index):
        ap_index = (ctypes.c_int * len(ap_index))(*ap_index)
        ret_i64 = ctypes.c_int64()
        ret = taichi_ccore.tie_LaunchContextBuilder_get_struct_ret_int(self.get_handle(), ap_index, len(ap_index), ctypes.byref(ret_i64))
        ex = get_exception_to_throw_if_not_success(ret, get_last_error)
        if ex is not None:
            raise ex
        return (
            ret_i64.value    
        )

    def get_struct_ret_uint(self, ap_index):
        ap_index = (ctypes.c_int * len(ap_index))(*ap_index)
        ret_u64 = ctypes.c_uint64()
        ret = taichi_ccore.tie_LaunchContextBuilder_get_struct_ret_uint(self.get_handle(), ap_index, len(ap_index), ctypes.byref(ret_u64))
        ex = get_exception_to_throw_if_not_success(ret, get_last_error)
        if ex is not None:
            raise ex
        return (
            ret_u64.value    
        )

    def get_struct_ret_float(self, ap_index):
        ap_index = (ctypes.c_int * len(ap_index))(*ap_index)
        ret_d = ctypes.c_double()
        ret = taichi_ccore.tie_LaunchContextBuilder_get_struct_ret_float(self.get_handle(), ap_index, len(ap_index), ctypes.byref(ret_d))
        ex = get_exception_to_throw_if_not_success(ret, get_last_error)
        if ex is not None:
            raise ex
        return (
            ret_d.value    
        )



if hasattr(taichi_ccore, 'tie_LaunchContextBuilder_destroy'):
    destroy_fn_addr = ctypes.addressof(taichi_ccore.tie_LaunchContextBuilder_destroy)
    destroy_fn_addr = ctypes.c_void_p.from_address(destroy_fn_addr).value
    LaunchContextBuilder._tie_api_tp_finalize = destroy_fn_addr
    set_pytype_tp_finalize(id(LaunchContextBuilder))


__all__ = ['LaunchContextBuilder']

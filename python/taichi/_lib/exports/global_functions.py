# This file is auto-generated by misc/exports_to_py.py
# DO NOT edit this file manually!
# To regenerate this file, run:
#     python misc/exports_to_py.py

import ctypes
from .ccore import taichi_ccore
from .utils import get_exception_to_throw_if_not_success, get_python_object_from_handle, wrap_callback_to_c


def set_last_error(error, msg):
    ret = taichi_ccore.tie_G_set_last_error(int(error), msg.encode("utf-8"))
    ex = get_exception_to_throw_if_not_success(ret, get_last_error)
    if ex is not None:
        raise ex
def get_last_error():
    ret_error = ctypes.c_int()
    ret_msg = ctypes.c_char_p()
    ret = taichi_ccore.tie_G_get_last_error(ctypes.byref(ret_error), ctypes.byref(ret_msg))
    if ret != 0:
        raise RuntimeError(f"Failed to call get_last_error, err={ret}")
    return (
        ret_error.value,
        ctypes.string_at(ret_msg.value).decode("utf-8")
    )
def arch_name(arch):
    ret_name = ctypes.c_char_p()
    ret = taichi_ccore.tie_G_arch_name(int(arch), ctypes.byref(ret_name))
    ex = get_exception_to_throw_if_not_success(ret, get_last_error)
    if ex is not None:
        raise ex
    return (
        ctypes.string_at(ret_name.value).decode("utf-8")
    )
def arch_from_name(name):
    ret_arch = ctypes.c_int()
    ret = taichi_ccore.tie_G_arch_from_name(name.encode("utf-8"), ctypes.byref(ret_arch))
    ex = get_exception_to_throw_if_not_success(ret, get_last_error)
    if ex is not None:
        raise ex
    return (
        ret_arch.value
    )
def host_arch():
    ret_arch = ctypes.c_int()
    ret = taichi_ccore.tie_G_host_arch(ctypes.byref(ret_arch))
    ex = get_exception_to_throw_if_not_success(ret, get_last_error)
    if ex is not None:
        raise ex
    return (
        ret_arch.value
    )
def is_extension_supported(arch, extension):
    ret_supported = ctypes.c_int()
    ret = taichi_ccore.tie_G_is_extension_supported(int(arch), int(extension), ctypes.byref(ret_supported))
    ex = get_exception_to_throw_if_not_success(ret, get_last_error)
    if ex is not None:
        raise ex
    return (
        bool(ret_supported.value)
    )
def default_compile_config():
    ret_handle = ctypes.c_void_p()
    ret = taichi_ccore.tie_G_default_compile_config(ctypes.byref(ret_handle))
    ex = get_exception_to_throw_if_not_success(ret, get_last_error)
    if ex is not None:
        raise ex
    return (
        get_python_object_from_handle('TieCompileConfigRef', ret_handle.value, manage_handle=False)
    )
def reset_default_compile_config():
    ret = taichi_ccore.tie_G_reset_default_compile_config()
    ex = get_exception_to_throw_if_not_success(ret, get_last_error)
    if ex is not None:
        raise ex
def set_pytype_tp_finalize(py_type_object):
    ret = taichi_ccore.tie_G_set_pytype_tp_finalize(ctypes.c_void_p(py_type_object))
    ex = get_exception_to_throw_if_not_success(ret, get_last_error)
    if ex is not None:
        raise ex

__all__ = [
    "set_last_error",
    "get_last_error",
    "arch_name",
    "arch_from_name",
    "host_arch",
    "is_extension_supported",
    "default_compile_config",
    "reset_default_compile_config",
    "set_pytype_tp_finalize"
]
